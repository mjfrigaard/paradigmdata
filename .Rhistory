contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
o = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
r = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
stop("Invalid `type`", call. = FALSE)
)
}
# make_mixed_list ----
make_mixed_list <- function() {
list(
'booleans' = rep(
x = sample(c(TRUE, FALSE), size = 2, replace = FALSE),
times = 2
),
'integers' = as.integer(sample(1:10, size = 5, replace = FALSE)),
'doubles' = round(rnorm(n = 5, mean = 3, sd = 0.2), digits = 3),
'strings' = sample(x = stringr::words, size = 5, replace = FALSE),
'dates' = c(lubridate::as_date(lubridate::today() - 10),
lubridate::as_date(lubridate::today() - 50),
lubridate::as_date(lubridate::today() - 100)
)
}
mixed_list <- make_mixed_list()
# make_my_list -----
make_my_list <- function() {
require(stringr)
require(snakecase)
words <- sample(snakecase::to_random_case(stringr::words),
size = 5, replace = FALSE)
sentences <- sample(snakecase::to_random_case(stringr::sentences),
size = 3, replace = FALSE)
letters <- sample(snakecase::to_random_case(LETTERS),
size = 10, replace = FALSE)
list(
'words' = words,
'sentences' = sentences,
'letters' = letters
)
}
my_list <- make_my_list()
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
sloop::ftype(plot)
sloop::ftype(summary)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
sloop::otype(datasets::LakeHuron)
class(datasets::LakeHuron)
sloop::otype(datasets::chickwts)
class(datasets::chickwts)
#| label: summary_demo
#| collapse: true
summary(datasets::LakeHuron)
summary(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
#| collapse: true
seq_along(my_list)
# take single value of 'x'
seq_along(my_list)[1]
# use this to get 'items in object'
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[2]])
vector(mode = "list", length = 3)
list(NULL, NULL, NULL)
#| label: for_loop
# define capture object
lc_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
lc_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(lc_list) <- c("words", "sentences", "letters")
}
lc_list
#| label: lapply
lapply(X = my_list, FUN = tolower)
sloop::ftype(lapply)
sloop::is_s3_generic(lapply)
sloop::ftype(lapply)
class(lapply)
attributes(lapply)
unclass(lapply)
sloop::ftype(lapply)
s3_methods_class(lapply)
sloop::ftype(lapply)
waldo::compare(
x = sapply(my_list, simplify = FALSE, USE.NAMES = FALSE),
y = lapply(X = my_list, FUN = tolower)
)
waldo::compare(
x = sapply(my_list, FUN = tolower,
simplify = FALSE,
USE.NAMES = FALSE),
y = lapply(X = my_list, FUN = tolower)
)
sapply(X = my_list, FUN = tolower)
vapply(X = my_list, FUN = tolower)
vapply(X = my_list, FUN = tolower, FUN.VALUE = "")
apply(X = my_list, MARGIN = 1, FUN = tolower)
apply(X = my_list, MARGIN = 2, FUN = tolower)
apply(X = my_list, MARGIN = 3, FUN = tolower)
lapply(X = my_list, FUN = tolower)
#| label: sapply_intro
sapply(X = my_list, FUN = tolower)
#| label: vapply_intro
vapply(X = my_list, FUN = tolower)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
is.vector(sapply(X = my_list, FUN = tolower))
is.list(sapply(X = my_list, FUN = tolower))
is.list(lapply(X = my_list, FUN = tolower))
is.vector(sapply(X = my_list, FUN = tolower, simplify = FALSE))
is.vector(sapply(X = my_list, FUN = tolower,
simplify = FALSE, USE.NAMES = FALSE))
is.vector(sapply(X = my_list, FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE))
sapply(X = my_list, FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
sapply(X = my_list['words'], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
sapply(X = my_list['words'], FUN = tolower,
simplify = FALSE, USE.NAMES = TRUE)
sapply(X = my_list['words'], FUN = tolower,
simplify = FALSE, USE.NAMES = FALSE)
sapply(X = my_list['words'], FUN = tolower,
simplify = FALSE, USE.NAMES = FALSE)
sapply(X = my_list['words'], FUN = tolower,
simplify = TRUE, USE.NAMES = FALSE)
lapply(X = my_list, FUN = tolower)
lapply(X = my_list[['words']], FUN = tolower)
sapply(X = my_list[['words']], FUN = tolower,
simplify = TRUE, USE.NAMES = FALSE)
lapply(X = my_list[['words']], FUN = tolower)
sapply(X = my_list[['words']], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
sapply(X = my_list[['words']], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
sapply(X = my_list[1], FUN = tolower)
sapply(X = my_list[[1]], FUN = tolower)
length(my_list[1])
my_list[[1]]
my_list[[1]] |> length()
length(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
sapply(X = my_list[1], FUN = tolower)
length(my_list[1])
my_list[1]
my_list[1] |> str()
str(length(my_list[[1]]))
sapply(X = my_list[[1]], FUN = tolower)
str(length(my_list[[1]]))
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
str(my_list[1])
str(sapply(X = my_list[1], FUN = tolower))
str(my_list[1])
str(sapply(X = my_list[1], FUN = tolower))
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
sapply(X = my_list[['words']], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
lapply(X = my_list[['words']], FUN = tolower)
lapply(X = my_list[[1]], FUN = tolower)
sapply(X = my_list[[1]], FUN = tolower,
simplify = FALSE, USE.NAMES = FALSE)
sapply(X = my_list[[1]], FUN = tolower)
lapply(X = my_list[[1]], FUN = tolower)
waldo::compare(x = , y = sapply(X = my_list[[1]], FUN = tolower, simplify = FALSE, USE.NAMES = FALSE))
waldo::compare(
x = lapply(X = my_list[[1]], FUN = tolower),
y = sapply(X = my_list[[1]], FUN = tolower,
simplify = FALSE, USE.NAMES = FALSE)
)
lapply(X = my_list[1:3], FUN = function(x) x[["words"]])
my_list[1:3]
my_list[["words"]])
my_list[["words"]]
my_list[1:3]
lapply(X = my_list[1:3], FUN = function(x) x["words"]
lapply(X = my_list[1:3], FUN = function(x) x["words"])
lapply(X = my_list[1], FUN = function(x) x["words"])
lapply(X = my_list[1], FUN = function(x) x[[1]])
lapply(X = my_list, FUN = function(x) x[[1]])
lapply(X = my_list, FUN = function(x) x[[2]])
matrix(nrow = 2, ncol = 2)
data.frame(matrix(nrow = 2, ncol = 2))
data.frame(matrix(nrow = 2, ncol = 2, byrow = TRUE, dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
)
data.frame(matrix(nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3"))))
data.frame(matrix(nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("r1", "r2"),
c("c1", "c2", "c3"))))
data.frame(matrix(nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("r1", "r2"),
c("c1", "c2", "c3"))), row.names = NULL)
vapply(X = my_list,
FUN = function(x) x[[1]],
FUN.VALUE = character(1))
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
#| label: sapply_waldo
waldo::compare(
x = lapply(X = my_list[[1]], FUN = tolower),
y = sapply(X = my_list[[1]], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
)
#| label: sloop_lapply
sloop::ftype(lapply)
#| label: sloop_lapply
isS3method(lapply)
#| label: sloop_lapply
isS3method('lapply')
sloop::ftype(lapply)
class(lapply)
unclass(lapply)
typeof(lapply)
#| label: sloop_lapply
isS3method(apply)
#| label: sloop_lapply
isS3method('apply')
typeof(lapply)
sloop::ftype(lapply)
#| label: sloop_lapply
isS3method('apply')
sloop::ftype(lapply)
attributes(apply)
attr(x = lapply, which = "class")
attr(x = lapply, which = "structure")
attr(x = lapply, which = "name")
attr(x = lapply, which = "type")
mode(apply)
#| label: sloop_lapply
isS3method('apply')
isS3method(f = 'apply')
isS3method(method = 'apply')
#| label: sloop_lapply
typeof(apply)
isS3method(method = 'apply')
sloop::ftype(lapply)
#| label: sloop_lapply
class(apply)
#| label: sloop_lapply
class(apply)
isS3method(method = 'apply')
sloop::ftype(lapply)
#| label: sloop_lapply
# is this an S3 method?
isS3method(method = 'apply')
# what type of function is it?
sloop::ftype(lapply)
# what type of function is it?
sloop::ftype(lapply)
#| label: sloop_lapply
# is this an S3 method?
isS3method(method = 'apply')
methods(apply)
methods('apply')
.S3methods(generic.function, apply, envir=parent.frame())
#| label: sloop_lapply
# is this an S3 method?
isS3method(method = 'apply')
# what type of function is it?
sloop::ftype(lapply)
my_list
my_list[1:4]
vapply(my_list[1:3], `[[`,
character(1), "words")
vapply(my_list[1:2], `[[`,
character(1), "words")
vapply(X = my_list[1:2], FUN = `[[`, FUN.VALUE = character(1), USE.NAMES = "words")
vapply(X = my_list[1:2], FUN = `[[`, FUN.VALUE = character(1), USE.NAMES = TRUE)
got_chars[23:25]
library(repurrrsive)
got_chars[23:25]
vapply(X = my_list[1:2],
FUN = `[[`,
FUN.VALUE = character(1), USE.NAMES = TRUE)
# vapply repeatedly
data.frame(
# define name
name = vapply(got_chars[23:25], `[[`,
character(1), "name"),
# define id
id = vapply(got_chars[23:25], `[[`,
integer(1), "id"),
stringsAsFactors = FALSE)
# vapply repeatedly
data.frame(
# define name
name = vapply(got_chars[23:25], `[[`,
character(1), "name"),
# define id
id = vapply(got_chars[23:25], `[[`,
integer(1), "id"),
stringsAsFactors = FALSE)
vapply(got_chars[23:25], `[[`,
character(1), "name")
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
my_list[1:2]
vapply(X = my_list[1:3], `[[`,
character(1), "name"
)
vapply(X = my_list[1:3], `[`,
character(1), "name")
vapply(X = my_list[1:3], `[[`,
character(1), "name")
vapply(X = my_list[[1:3]], `[[`,
character(1), "name")
vapply(X = my_list, `[[`,
character(1), "name")
vapply(X = my_list[1:3], `[[`,
character(1), "name")
vapply(X = my_list[[1:3]], `[[`,
character(1), "name")
vapply(X = my_list[1:3], `[`, character(1), "name")
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1), USE.NAMES = "name")
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1), "name")
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1))
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1), "name")
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1), "words")
vapply(X = my_list[1:3], FUN = `[`, FUN.VALUE = character(1), "letters")
vapply(X = my_list[1:2], FUN = `[`, FUN.VALUE = character(1), "letters")
vapply(X = my_list[1:3], FUN = `[[`, FUN.VALUE = character(1), "letters")
str(got_chars[23:25])
vapply(X = my_list, FUN = `[[`, FUN.VALUE = character(1))
vapply(X = my_list, FUN = `[`, FUN.VALUE = character(1))
vapply(X = my_list[[1]], FUN = `[[`, FUN.VALUE = character(1))
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[1:2]],
FUN.VALUE = character(1))
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
vapply(X = my_list[1:2], FUN = function(x) x[[2]],
character(1), "name")
vapply(X = my_list[1:2], FUN = function(x) x[[2]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[2]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[1:2]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[1]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[3]],
character(1))
my_list
vapply(X = my_list[1:3], FUN = function(x) x[[1]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[1]],
character(1))
apply(got_chars[23:25], `[[`,
integer(1), "id")
apply(got_chars[23:25], `[[`,
integer(1), "id")v
vapply(got_chars[23:25], `[[`,
integer(1), "id")v
vapply(got_chars[23:25], `[[`,
integer(1), "id")
ot_chars[23:25]
got_chars[23:25]
vapply(X = my_list[1:2], FUN = function(x) x[[2]],
character(1), "name")
vapply(X = my_list[1:2], FUN = function(x) x[[2]],
character(1))
vapply(X = my_list[1:3], FUN = function(x) x[[1]],
character(1))
vapply(X = my_list[[1:3]], FUN = function(x) x[[1]],
character(1))
vapply(X = my_list[[1:3]], FUN = function(x) x[1],
character(1))
vapply(X = my_list[[1:3]], FUN = `[[`,,
character(1))
vapply(X = my_list[[1:3]], FUN = `[`,,
character(1))
vapply(X = my_list[1:3], FUN = `[`,,
character(1))
vapply(X = my_list[1:3], FUN = `[`,
character(1))
vapply(X = my_list[1], FUN = `[`, character(1))
vapply(X = my_list[[1]], FUN = `[`, character(1))
vapply(X = my_list[[1:2]], FUN = `[`, character(1))
vapply(X = my_list[[1]], FUN = `[`, character(1))
vapply(X = my_list[[2]], FUN = `[`, character(1))
vapply(X = my_list[[1]], FUN = `[`, character(1))
vapply(X = my_list[[1:2]], FUN = `[`, character(1))
vapply(X = my_list[[1:4]], FUN = `[`, character(1))
vapply(X = my_list[[1:3]], FUN = `[`, character(1))
vapply(X = my_list[[1:2]], FUN = `[`, character(1))
my_list
vapply(X = my_list[[1]], FUN = `[`, character(1))
vapply(X = my_list[[2]], FUN = `[`, character(1))
vapply(X = my_list[[1,2]], FUN = `[`, character(1))
vapply(X = my_list[[1]], FUN = `[`, character(1))
vapply(X = my_list[[1]][1], FUN = `[`, character(1))
vapply(X = my_list[[1]][1:3], FUN = `[`, character(1))
vapply(X = my_list[[2]][1:3], FUN = `[`, character(1))
vapply(X = my_list[[3]][1:3], FUN = `[`, character(1))
data.frame(
words = vapply(X = my_list[[1]][1:3], FUN = `[`, character(1)),
sentences = vapply(X = my_list[[2]][1:3], FUN = `[`, character(1)),
letters = vapply(X = my_list[[3]][1:3], FUN = `[`, character(1)),
stringsAsFactors = FALSE)
data.frame(
words = vapply(X = my_list[[1]][1:3], FUN = `[`, character(1)),
sentences = vapply(X = my_list[[2]][1:3], FUN = `[`, character(1)),
letters = vapply(X = my_list[[3]][1:3], FUN = `[`, character(1)),
stringsAsFactors = FALSE, row.names = FALSE)
data.frame(
words = vapply(X = my_list[[1]][1:3], FUN = `[`, character(1)),
sentences = vapply(X = my_list[[2]][1:3], FUN = `[`, character(1)),
letters = vapply(X = my_list[[3]][1:3], FUN = `[`, character(1)),
stringsAsFactors = FALSE)
tibble(
words = vapply(X = my_list[[1]][1:3], FUN = `[`, character(1)),
sentences = vapply(X = my_list[[2]][1:3], FUN = `[`, character(1)),
letters = vapply(X = my_list[[3]][1:3], FUN = `[`, character(1)))
tibble::tibble(
words = vapply(X = my_list[[1]][1:3],
FUN = `[`,
FUN.VALUE = character(1)),
sentences = vapply(X = my_list[[2]][1:3],
FUN = `[`,
FUN.VALUE = character(1)),
letters = vapply(X = my_list[[3]][1:3],
FUN = `[`,
FUN.VALUE = character(1))
)
install.packages(c("lattice", "Matrix", "RcppArmadillo", "renv"))
