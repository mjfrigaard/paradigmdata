nyt_proc <- nyt_csv |>
dplyr::mutate(
# create age_group variable
age_group = case_when(
Age < 18 ~ "<18",
Age >= 18 & Age < 25 ~ "18-24",
Age >= 25 & Age < 35 ~ "25-34",
Age >= 35 & Age < 45 ~ "35-44",
Age >= 45 & Age < 55 ~ "45-54",
Age >= 55 & Age < 65 ~ "55-64",
Age >= 65 ~ "65+"),
# factor age_group (ordered)
age_group = factor(age_group,
levels = c("<18", "18-24", "25-34",
"35-44", "45-54", "55-64", "65+"),
ordered = TRUE),
# create CTR variable
ctr_rate = round(x = Clicks/Impressions, digits = 3),
# create new Female variable
female = case_when(
Gender == 0 ~ "yes",
Gender == 1 ~ "no",
TRUE ~ NA_character_),
# factor female (un-ordered)
female = factor(female,
levels = c("no", "yes")),
signed_in = case_when(
Signed_In == 0 ~ "no",
Signed_In == 1 ~ "yes",
TRUE ~ NA_character_),
# factor signed_in (un-ordered)
signed_in = factor(signed_in,
levels = c("no", "yes"))) |>
# remove Signed_in
dplyr::select(-c(Signed_In)) |>
# format columns
janitor::clean_names()
}
return(nyt_proc)
}
#| label: test_nyt_data_processing
#| error: false
nyt1_proc <- nyt_data_processing(nyt1)
str(nyt1_proc)
#| label: test_nyt_data_processing_error
#| error: true
nyt_data_processing(nyt1_proc)
raw_data_pths <- list.files(path = "dds-nyt/raw", pattern = ".csv$", full.names = TRUE)
test_raw_data_pths <- raw_data_pths[1:2]
test_raw_data_pths
test_raw_data_pths |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
str(list.len = 2)
test_raw_data_pths |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
str(list.len = 2)
test_raw_data_pths |> purrr::set_names()
#| label: walk2_file_copy
walk2(.x = file_pths, .y = raw_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
#| label: utils
#| eval: true
#| echo: false
#| include: false
source("../_common.R")
library(kableExtra)
mixed_list <- make_mixed_list()
my_list <- make_my_list()
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
library(waldo)
sloop::ftype(plot)
sloop::ftype(summary)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
sloop::otype(datasets::LakeHuron)
class(datasets::LakeHuron)
sloop::otype(datasets::chickwts)
class(datasets::chickwts)
#| label: summary_demo
#| collapse: true
summary(datasets::LakeHuron)
summary(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
#| collapse: true
seq_along(my_list)
# take single value of 'x'
seq_along(my_list)[1]
# use this to get 'items in object'
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[2]])
#| label: empty_list
#| collapse: true
vector(mode = "list", length = 3)
list(NULL, NULL, NULL)
#| label: for_loop
# define capture object
lc_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
lc_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(lc_list) <- c("words", "sentences", "letters")
}
lc_list
#| label: lapply_intro
lapply(X = my_list, FUN = tolower)
#| label: sapply_list
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
#| label: sapply_vector
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
#| label: sapply_waldo
waldo::compare(
x = lapply(X = my_list[[1]], FUN = tolower),
y = sapply(X = my_list[[1]], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
)
#| label: lapply_anon_fun
lapply(X = my_list, FUN = function(x) x[[2]])
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
my_words <- my_list[['words']]
tolower(my_words)
#| label: my_list_purrr_standard
#| results: hold
purrr::map(.x = my_list, .f = tolower)
#| label: mixed_list
mixed_list
#| warning: false
#| collapse: false
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_int(\(x) is.integer(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_dbl(\(x) is.double(x))
#| warning: true
#| message: true
#| collapse: false
mixed_list |> purrr::map_chr(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
#| label: my_list_purrr_anonymous_fun
#| results: hold
my_list |> purrr::map(\(x) tolower(x))
#| label: my_list_purrr_test_waldo
#| results: hold
waldo::compare(
x = purrr::map(.x = my_list, .f = tolower),
y = my_list |> purrr::map(\(x) tolower(x)))
#| label: my_list_purrr_anonymous
#| results: hold
waldo::compare(
x = my_list |> purrr::map(\(x) tolower(x)),
y = my_list |> purrr::map(~ tolower(.x)))
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
#| label: nyt_file_urls
#| eval: true
#| collapse: false
# create file urls
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# add numbers to name
nyt_file_nms <- paste0("nyt", 1:31, ".csv")
# combine
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls)
nyt_local_pths <- paste("dds-nyt", nyt_file_nms, sep = "/")
head(nyt_local_pths)
#| label: download.file
#| eval: true
#| collapse: false
#| results: asis
# do it for one
fs::dir_create("dds-nyt")
download.file(url = nyt_file_urls[1], destfile = nyt_local_pths[1])
#| label: walk2_download_files
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
#| label: purrr-progress
#| echo: false
#| fig-align: center
#| out-width: '100%'
#| fig-dpi: 320
#| fig-asp: 0.618
knitr::include_graphics(path = "purrr-progress.gif")
#| label: dir_tree_download_files
fs::dir_tree("dds-nyt")
#| label: file_pths
file_pths <- list.files("dds-nyt", full.names = TRUE, pattern = ".csv$")
head(file_pths)
#| label: raw_file_pths
#| eval: true
#| collapse: true
# do it for one
gsub(pattern = "^dds-nyt",
replacement = "dds-nyt/raw",
x = file_pths[1])
# write the recipe
file_pths |> purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw")) |> head()
# map it across all
raw_file_pths <- file_pths |>
purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw"))
#| label: create_paths
#| eval: true
fs::dir_create("dds-nyt/raw")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = raw_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt/raw", type = "any")
#| label: walk2_file_copy
walk2(.x = file_pths, .y = raw_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
fs::dir_tree("dds-nyt/raw", type = "any")
#| label: test_file_delete
fs::file_delete(file_pths[1])
#| label: error_file_delete
#| error: true
walk(.x = file_pths, .f = fs::file_delete)
walk(# list CURRENT files
.x = list.files(
path = "dds-nyt",
pattern = ".csv$",
full.names = TRUE),
# map function
.f = fs::file_delete)
fs::dir_tree("dds-nyt", type = "any", recurse = TRUE)
#| label: import_nyt1.csv
nyt1 <- vroom::vroom(
"dds-nyt/raw/nyt1.csv",
delim = ",",
show_col_types = FALSE)
str(nyt1)
#| label: fun_nyt_data_processing
#| code-fold: true
nyt_data_processing <- function(nyt_csv) {
orig_nms <- c("Age", "Gender", "Impressions", "Clicks", "Signed_In")
nyt_nms <- names(nyt_csv)
if (isFALSE(identical(x = orig_nms, y = nyt_nms))) {
cli::cli_abort("these data don't have the correct columns!")
} else {
nyt_proc <- nyt_csv |>
dplyr::mutate(
# create age_group variable
age_group = case_when(
Age < 18 ~ "<18",
Age >= 18 & Age < 25 ~ "18-24",
Age >= 25 & Age < 35 ~ "25-34",
Age >= 35 & Age < 45 ~ "35-44",
Age >= 45 & Age < 55 ~ "45-54",
Age >= 55 & Age < 65 ~ "55-64",
Age >= 65 ~ "65+"),
# factor age_group (ordered)
age_group = factor(age_group,
levels = c("<18", "18-24", "25-34",
"35-44", "45-54", "55-64", "65+"),
ordered = TRUE),
# create CTR variable
ctr_rate = round(x = Clicks/Impressions, digits = 3),
# create new Female variable
female = case_when(
Gender == 0 ~ "yes",
Gender == 1 ~ "no",
TRUE ~ NA_character_),
# factor female (un-ordered)
female = factor(female,
levels = c("no", "yes")),
signed_in = case_when(
Signed_In == 0 ~ "no",
Signed_In == 1 ~ "yes",
TRUE ~ NA_character_),
# factor signed_in (un-ordered)
signed_in = factor(signed_in,
levels = c("no", "yes"))) |>
# remove Signed_in
dplyr::select(-c(Signed_In)) |>
# format columns
janitor::clean_names()
}
return(nyt_proc)
}
#| label: test_nyt_data_processing
#| error: false
nyt1_proc <- nyt_data_processing(nyt1)
str(nyt1_proc)
#| label: test_nyt_data_processing_error
#| error: true
nyt_data_processing(nyt1_proc)
raw_data_pths <- list.files(path = "dds-nyt/raw", pattern = ".csv$", full.names = TRUE)
test_raw_data_pths <- raw_data_pths[1:2]
test_raw_data_pths
test_raw_data_pths |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
str(list.len = 2)
test_raw_data_pths |> purrr::set_names()
test_raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
str(list.len = 2)
test_raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
str(list.len = 2)
test_raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
# bind
purrr::list_rbind(names_to = "id") |>
str()
nyt_data_proc <- raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
# bind
purrr::list_rbind(names_to = "id")
dplyr::glimpse(nyt_data_proc)
nyt_data_proc |>
dplyr::count(id)
#| label: proc_file_pth
#| eval: true
#| collapse: true
# create file names
nyt_data_proc_pths <- dplyr::mutate(.data = nyt_data_proc,
file_nm = tools::file_path_sans_ext(base::basename(id)),
proc_file_pth = paste0("dds-nyt/processed/",
as.character(Sys.Date()), "-",
file_nm))
nyt_data_proc_pths |> dplyr::count(proc_file_pth)
# create folder
fs::dir_create("dds-nyt/processed/")
#
nyt_data_proc_pths %>%
dplyr::group_by(proc_file_pth) %>%
dplyr::group_walk(.f = vroom::vroom_write(x = .x,
file = paste0(.y$proc_file_pth, ".csv")))
# create folder
fs::dir_create("dds-nyt/processed/")
#
dplyr::group_by(nyt_data_proc_pths, proc_file_pth) |>
dplyr::group_walk(.f = vroom::vroom_write(
file = paste0(.y$proc_file_pth, ".csv")))
# create folder
fs::dir_create("dds-nyt/processed/")
#
dplyr::group_by(nyt_data_proc_pths, proc_file_pth) |>
dplyr::group_walk(.f = vroom::vroom_write,
file = paste0(.y$proc_file_pth, ".csv"))
# create folder
fs::dir_create("dds-nyt/processed/")
#
nyt_data_proc_pths |>
dplyr::group_by(proc_file_pth) |>
dplyr::group_walk( ~vroom::vroom_write(x = .x,
file = paste0(.y$proc_file_pth, ".csv")))
fs::dir_tree("dds-nyt/processed/")
vroom::vroom("dds-nyt/processed/2023-04-07-nyt1.csv")
vroom::vroom(list.files("dds-nyt/processed", pattern = ".csv$", full.names = TRUE)[1])
nyt1_proc_check <- vroom::vroom(
file = list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[1], # grab the first file
delim = ",", show_col_types = FALSE
)
waldo::compare(x = nyt1_proc, y = nyt1_proc_check)
nyt1_proc
nyt1_proc_check
nyt1_proc[1]
nyt1_proc
nyt1_proc_check
nyt1_proc_check <- vroom::vroom(
file = list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[[1]], # grab the first file
delim = ",", show_col_types = FALSE
)
nyt1_proc_check
list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[[1]]
nyt1_proc_check <- vroom::vroom(
"dds-nyt/processed/2023-04-07-nyt1.csv", # grab the first file
delim = ",", show_col_types = FALSE
)
nyt1_proc_check
# create folder
fs::dir_create("dds-nyt/processed/")
#
nyt_data_proc_pths |>
dplyr::group_by(proc_file_pth) |>
dplyr::group_walk( ~vroom::vroom_write(x = .x,
file = paste0(.y$proc_file_pth, ".csv"),
delim = ","))
fs::dir_tree("dds-nyt/processed/")
list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[[1]]
test_file <- list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[[1]]
test_file
nyt1_proc_check <- vroom::vroom(
test_file, # grab the first file
delim = ",", show_col_types = FALSE
)
nyt1_proc_check
# waldo::compare(
#   x = nyt1_proc,
#   y = nyt1_proc_check)
nyt1_proc_check <- vroom::vroom(
list.files(path = "dds-nyt/processed",
pattern = ".csv$",
full.names = TRUE)[[1]], # grab the first file
delim = ",", show_col_types = FALSE
)
waldo::compare(
x = nyt1_proc,
y = nyt1_proc_check)
