#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
#| collapse: true
seq_along(my_list)
# take single value of 'x'
seq_along(my_list)[1]
# use this to get 'items in object'
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[2]])
#| label: empty_list
#| collapse: true
vector(mode = "list", length = 3)
list(NULL, NULL, NULL)
#| label: for_loop
# define capture object
lc_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
lc_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(lc_list) <- c("words", "sentences", "letters")
}
lc_list
#| label: lapply_intro
lapply(X = my_list, FUN = tolower)
#| label: sapply_list
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
#| label: sapply_vector
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
#| label: sapply_waldo
waldo::compare(
x = lapply(X = my_list[[1]], FUN = tolower),
y = sapply(X = my_list[[1]], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
)
#| label: lapply_anon_fun
lapply(X = my_list, FUN = function(x) x[[2]])
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
my_words <- my_list[['words']]
tolower(my_words)
#| label: my_list_purrr_standard
#| results: hold
purrr::map(.x = my_list, .f = tolower)
#| label: mixed_list
mixed_list
#| warning: false
#| collapse: false
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_int(\(x) is.integer(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_dbl(\(x) is.double(x))
#| warning: true
#| message: true
#| collapse: false
mixed_list |> purrr::map_chr(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
#| label: my_list_purrr_anonymous_fun
#| results: hold
my_list |> purrr::map(\(x) tolower(x))
#| label: my_list_purrr_test_waldo
#| results: hold
waldo::compare(
x = purrr::map(.x = my_list, .f = tolower),
y = my_list |> purrr::map(\(x) tolower(x)))
#| label: my_list_purrr_anonymous
#| results: hold
waldo::compare(
x = my_list |> purrr::map(\(x) tolower(x)),
y = my_list |> purrr::map(~ tolower(.x)))
#| label: clean_dds_nyt
#| echo: false
fs::dir_delete("dds-nyt")
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
#| label: nyt_file_urls
#| eval: true
#| collapse: false
# create file urls
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# add numbers to name
nyt_file_nms <- paste0("nyt", 1:31, ".csv")
# combine
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls)
nyt_local_pths <- paste("dds-nyt", nyt_file_nms, sep = "/")
head(nyt_local_pths)
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
download.file(url = nyt_file_urls[1], destfile = nyt_local_pths[1])
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
download.file(url = nyt_file_urls[1], destfile = nyt_local_pths[1])
#| label: walk2_download_files
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_tree("dds-nyt")
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
download.file(url = nyt_file_urls[1], destfile = nyt_local_pths[1])
#| label: walk2_download_files
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_tree("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_tree("dds-nyt")
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_tree("dds-nyt")
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_tree("dds-nyt")
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
#| label: walk2_download_files
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file, .progress = TRUE, quiet = TRUE)
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file, .progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
fs::dir_create("dds-nyt")
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file, .progress = TRUE, quiet = TRUE)
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
fs::dir_tree("dds-nyt", type = "any")
#| label: utils
#| eval: true
#| echo: false
#| include: false
source("../_common.R")
library(kableExtra)
mixed_list <- make_mixed_list()
my_list <- make_my_list()
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
library(waldo)
sloop::ftype(plot)
sloop::ftype(summary)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
sloop::otype(datasets::LakeHuron)
class(datasets::LakeHuron)
sloop::otype(datasets::chickwts)
class(datasets::chickwts)
#| label: summary_demo
#| collapse: true
summary(datasets::LakeHuron)
summary(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
#| collapse: true
seq_along(my_list)
# take single value of 'x'
seq_along(my_list)[1]
# use this to get 'items in object'
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[2]])
#| label: empty_list
#| collapse: true
vector(mode = "list", length = 3)
list(NULL, NULL, NULL)
#| label: for_loop
# define capture object
lc_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
lc_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(lc_list) <- c("words", "sentences", "letters")
}
lc_list
#| label: lapply_intro
lapply(X = my_list, FUN = tolower)
#| label: sapply_list
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
#| label: sapply_vector
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
waldo::compare(
x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower)
)
#| label: sapply_waldo
waldo::compare(
x = lapply(X = my_list[[1]], FUN = tolower),
y = sapply(X = my_list[[1]], FUN = tolower,
simplify = TRUE, USE.NAMES = TRUE)
)
#| label: lapply_anon_fun
lapply(X = my_list, FUN = function(x) x[[2]])
#| label: vapply_anon_fun
vapply(X = my_list,
FUN = function(x) x[[2]],
FUN.VALUE = character(1))
my_words <- my_list[['words']]
tolower(my_words)
#| label: my_list_purrr_standard
#| results: hold
purrr::map(.x = my_list, .f = tolower)
#| label: mixed_list
mixed_list
#| warning: false
#| collapse: false
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_int(\(x) is.integer(x))
#| warning: false
#| collapse: false
mixed_list |> purrr::map_dbl(\(x) is.double(x))
#| warning: true
#| message: true
#| collapse: false
mixed_list |> purrr::map_chr(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) is.character(x))
#| warning: true
#| message: true
#| eval: true
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
#| label: my_list_purrr_anonymous_fun
#| results: hold
my_list |> purrr::map(\(x) tolower(x))
#| label: my_list_purrr_test_waldo
#| results: hold
waldo::compare(
x = purrr::map(.x = my_list, .f = tolower),
y = my_list |> purrr::map(\(x) tolower(x)))
#| label: my_list_purrr_anonymous
#| results: hold
waldo::compare(
x = my_list |> purrr::map(\(x) tolower(x)),
y = my_list |> purrr::map(~ tolower(.x)))
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
#| label: nyt_file_urls
#| eval: true
#| collapse: false
# create file urls
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# add numbers to name
nyt_file_nms <- paste0("nyt", 1:31, ".csv")
# combine
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls)
nyt_local_pths <- paste("dds-nyt", nyt_file_nms, sep = "/")
head(nyt_local_pths)
#| label: download.file
#| eval: true
#| collapse: false
# do it for one
fs::dir_create("dds-nyt")
download.file(url = nyt_file_urls[1], destfile = nyt_local_pths[1])
#| label: walk2_download_files
walk2(.x = nyt_file_urls, .y = nyt_local_pths, .f =  download.file,
.progress = TRUE, quiet = TRUE)
#| label: purrr-progress
#| echo: false
#| fig-align: center
#| out-width: '100%'
#| fig-dpi: 320
#| fig-asp: 0.618
knitr::include_graphics(path = "purrr-progress.gif")
#| label: dir_tree_download_files
fs::dir_tree("dds-nyt")
#| label: file_pths
file_pths <- list.files("dds-nyt", full.names = TRUE, pattern = ".csv$")
head(file_pths)
#| label: raw_file_pths
#| eval: true
#| collapse: true
# do it for one
gsub(pattern = "^dds-nyt",
replacement = "dds-nyt-raw",
x = file_pths[1])
# write the recipe
file_pths |> purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt-raw")) |> head()
# map it across all
raw_file_pths <- file_pths |>
purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt-raw"))
#| label: file_nm_dt_prefix
#| eval: true
#| collapse: true
# create file names
file_nms <- base::basename(file_pths)
# date prefix
tday_prefix <- paste0(as.character(Sys.Date()), "-")
# combine
file_nm_dt_prefix <- gsub(pattern = "^nyt",
replacement = paste0(tday_prefix, "nyt"),
x = file_nms)
head(file_nm_dt_prefix)
#| label: proc_file_pths
#| eval: true
# create file paths
proc_file_pths <- paste("dds-nyt-proc", file_nm_dt_prefix, sep = "/")
head(proc_file_pths)
#| label: create_paths
#| eval: true
fs::dir_create("dds-nyt-raw")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = raw_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt-raw", type = "any")
#| label: walk2_file_copy
walk2(.x = file_pths, .y = raw_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
fs::dir_tree("dds-nyt-raw", type = "any")
#| label: clean_file_copy
#| echo: false
fs::dir_delete("dds-nyt-raw")
#| label: create_path_proc
#| eval: true
fs::dir_create("dds-nyt-proc")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = proc_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt-proc", type = "any")
#| label: walk2_file_copy_proc
walk2(.x = file_pths, .y = proc_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
#| label: raw_file_pths
#| eval: true
#| collapse: true
# do it for one
gsub(pattern = "^dds-nyt",
replacement = "dds-nyt/raw",
x = file_pths[1])
# write the recipe
file_pths |> purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw")) |> head()
# map it across all
raw_file_pths <- file_pths |>
purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw"))
#| label: file_nm_dt_prefix
#| eval: true
#| collapse: true
# create file names
file_nms <- base::basename(file_pths)
# date prefix
tday_prefix <- paste0(as.character(Sys.Date()), "-")
# combine
file_nm_dt_prefix <- gsub(pattern = "^nyt",
replacement = paste0(tday_prefix, "nyt"),
x = file_nms)
head(file_nm_dt_prefix)
#| label: proc_file_pths
#| eval: true
# create file paths
proc_file_pths <- paste("dds-nyt/proc", file_nm_dt_prefix, sep = "/")
head(proc_file_pths)
#| label: create_paths
#| eval: true
fs::dir_create("dds-nyt/raw")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = raw_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt/raw", type = "any")
#| label: walk2_file_copy
walk2(.x = file_pths, .y = raw_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
fs::dir_tree("dds-nyt/raw", type = "any")
#| label: create_path_proc
#| eval: true
fs::dir_create("dds-nyt/proc")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = proc_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt/proc", type = "any")
#| label: walk2_file_copy_proc
walk2(.x = file_pths, .y = proc_file_pths, .f = fs::file_copy,
.progress = TRUE, overwrite = TRUE)
fs::dir_tree("dds-nyt/proc", type = "any")
fs::dir_tree("dds-nyt", type = "any")
walk(.x = file_pths, .f = fs::file_delete)
fs::dir_tree("dds-nyt", type = "any")
