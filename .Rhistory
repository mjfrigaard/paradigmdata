)),
g = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='true'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
o = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
r = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
stop("Invalid `type`", call. = FALSE)
)
}
# roxy_ns_df -----
roxy_ns_df <- data.frame(
check.names = FALSE,
`roxygen2 tag` = c("@importFrom", "@import", "@export"),
`NAMESPACE directive` = c(
"importFrom() : import selected object from another NAMESPACE",
"import(): import all objects from another package’s NAMESPACE.",
"export() : export the function, method, generic, or class so it’s available outside of the package (in the NAMESPACE)"
),
DESCRIPTION = c("Imports:", "Imports:", "Nothing")
)
# box_use_df -----
box_use_df <- data.frame(
check.names = FALSE,
`Inside box::use()` = c(
"box::use(
pkg
)",
"box::use(
p = pkg
)",
"box::use(
pkg = pkg[foo, bar]
)",
"box::use(
pkg[my_foo = foo, ...]
)"
),
Action = c(
"imports 'pkg', does not attach any function names",
"imports 'pkg' with alias ('p'), does not attach any function names",
"imports 'pkg' and attaches the function names 'pkg::foo()' and 'pkg::bar()'",
"imports 'pkg' with alias for 'foo' ('my_foo') and attaches all exported function names"
)
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
isS3stdGeneric(plot)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
class(datasets::LakeHuron)
class(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
isS3stdGeneric(summary)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output
summary(lm_mod)
# get coefficients of summary of model output
coef(summary(lm_mod))
#| label: make_my_list
#| eval: true
#| echo: false
make_my_list <- function() {
require(stringr)
require(snakecase)
words <- sample(snakecase::to_random_case(stringr::words),
size = 5, replace = FALSE)
sentences <- sample(snakecase::to_random_case(stringr::sentences),
size = 3, replace = FALSE)
letters <- sample(snakecase::to_random_case(LETTERS),
size = 10, replace = FALSE)
list(
'words' = words,
'sentences' = sentences,
'letters' = letters
)
}
my_list <- make_my_list()
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
my_words <- my_list[['words']]
tolower(my_words)
#| label: my_list_purrr_standard
#| results: hold
purrr::map(.x = my_list, .f = tolower)
#| label: my_list_purrr_lambda
#| results: hold
waldo::compare(
x = purrr::map(.x = my_list, .f = tolower),
y = my_list |> purrr::map(~ tolower(.x)))
#| label: my_list_purrr_anonymous
#| results: hold
waldo::compare(
x = my_list |> purrr::map(\(x) tolower(x)),
y = my_list |> purrr::map(~ tolower(.x)))
#| label: make_mixed_list
#| eval: true
#| echo: false
make_mixed_list <- function() {
list(
'booleans' = rep(
x = sample(c(TRUE, FALSE), size = 2, replace = FALSE),
times = 2
),
'integers' = as.integer(sample(1:10, size = 5, replace = FALSE)),
'doubles' = round(rnorm(n = 5, mean = 3, sd = 0.2), digits = 3),
'strings' = sample(x = stringr::words, size = 5, replace = FALSE),
'dates' = c(lubridate::as_date(lubridate::today() - 10),
lubridate::as_date(lubridate::today() - 50),
lubridate::as_date(lubridate::today() - 100)
)
}
mixed_list <- make_mixed_list()
#| label: mixed_list
mixed_list
#| warning: false
#| collapse: true
map_lgl(.x = mixed_list, .f = is.logical)
#| warning: false
#| collapse: true
map_int(.x = mixed_list, .f = is.integer)
#| warning: false
#| collapse: true
map_dbl(.x = mixed_list, .f = is.double)
#| warning: false
#| collapse: true
map_chr(.x = mixed_list, .f = is.character)
#| warning: true
#| collapse: true
mixed_list |> purrr::map_chr(\(x) is.character(x))
#| warning: true
#| collapse: true
mixed_list |>
as.character() |>
purrr::map_chr(\(x) is.character(x))
#| warning: true
#| collapse: true
purrr::map_chr(.x = mixed_list[['strings']], .f = is.character)
#| warning: true
#| collapse: true
purrr::map_chr(.x = as.character(mixed_list[['strings']]), .f = is.character)
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
sloop::ftype(plot)
sloop::ftype(summary)
sloop::ftype(coef)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic
coef(summary(lm_mod))
#| label: utils
#| eval: true
#| echo: false
#| include: false
library(kableExtra)
co_box <- function(color, header, contents = "Your text") {
class <- switch(color,
b = "note",
g = "tip",
r = "important",
o = "caution",
stop("Invalid `type`", call. = FALSE)
)
switch(color,
b = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
g = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='true'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
o = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
r = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
stop("Invalid `type`", call. = FALSE)
)
}
# make_mixed_list ----
make_mixed_list <- function() {
list(
'booleans' = rep(
x = sample(c(TRUE, FALSE), size = 2, replace = FALSE),
times = 2
),
'integers' = as.integer(sample(1:10, size = 5, replace = FALSE)),
'doubles' = round(rnorm(n = 5, mean = 3, sd = 0.2), digits = 3),
'strings' = sample(x = stringr::words, size = 5, replace = FALSE),
'dates' = c(lubridate::as_date(lubridate::today() - 10),
lubridate::as_date(lubridate::today() - 50),
lubridate::as_date(lubridate::today() - 100)
)
}
mixed_list <- make_mixed_list()
# make_my_list -----
make_my_list <- function() {
require(stringr)
require(snakecase)
words <- sample(snakecase::to_random_case(stringr::words),
size = 5, replace = FALSE)
sentences <- sample(snakecase::to_random_case(stringr::sentences),
size = 3, replace = FALSE)
letters <- sample(snakecase::to_random_case(LETTERS),
size = 10, replace = FALSE)
list(
'words' = words,
'sentences' = sentences,
'letters' = letters
)
}
my_list <- make_my_list()
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
sloop::ftype(plot)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
class(datasets::LakeHuron)
class(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
sloop::ftype(summary)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
my_words <- my_list[['words']]
tolower(my_words)
#| label: utils
#| eval: true
#| echo: false
#| include: false
library(kableExtra)
co_box <- function(color, header, contents = "Your text") {
class <- switch(color,
b = "note",
g = "tip",
r = "important",
o = "caution",
stop("Invalid `type`", call. = FALSE)
)
switch(color,
b = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
g = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='true'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
o = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
r = cat(paste0(
"\n",
":::: {.callout-", class, " collapse='false'}", "\n\n",
"## ", header, "\n\n",
"::: {style='font-size: 0.90em; color: #696969;'}\n\n",
contents, "\n\n",
"::: \n\n",
"::::", "\n"
)),
stop("Invalid `type`", call. = FALSE)
)
}
# make_mixed_list ----
make_mixed_list <- function() {
list(
'booleans' = rep(
x = sample(c(TRUE, FALSE), size = 2, replace = FALSE),
times = 2
),
'integers' = as.integer(sample(1:10, size = 5, replace = FALSE)),
'doubles' = round(rnorm(n = 5, mean = 3, sd = 0.2), digits = 3),
'strings' = sample(x = stringr::words, size = 5, replace = FALSE),
'dates' = c(lubridate::as_date(lubridate::today() - 10),
lubridate::as_date(lubridate::today() - 50),
lubridate::as_date(lubridate::today() - 100)
)
}
mixed_list <- make_mixed_list()
# make_my_list -----
make_my_list <- function() {
require(stringr)
require(snakecase)
words <- sample(snakecase::to_random_case(stringr::words),
size = 5, replace = FALSE)
sentences <- sample(snakecase::to_random_case(stringr::sentences),
size = 3, replace = FALSE)
letters <- sample(snakecase::to_random_case(LETTERS),
size = 10, replace = FALSE)
list(
'words' = words,
'sentences' = sentences,
'letters' = letters
)
}
my_list <- make_my_list()
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(color = "r", header = "ALERT!", "**This post is currently under development. Thank you for your patience.**")
#| label: pkgs
#| echo: true
#| message: false
#| warning: false
# remotes::install_github("tidyverse/purrr",
#                   force = TRUE, quiet = TRUE)
library(purrr)
library(dplyr)
library(lubridate)
library(stringr)
library(snakecase)
library(sloop)
sloop::ftype(plot)
#| label: LakeHuron
#| echo: true
#| eval: true
#| collapse: true
class(datasets::LakeHuron)
class(datasets::chickwts)
#| layout-ncol: 2
#| fig-cap:
#|   - "Time-series plot"
#|   - "Scatter Plot"
plot(datasets::LakeHuron)
plot(datasets::chickwts)
sloop::ftype(summary)
#| label: lm_generic
#| code-fold: true
#| collapse: true
# get summary of columns ----------------------------------------------------
summary(mtcars$hp)
summary(mtcars$mpg)
# store model output  -------------------------------------------------------
lm_mod <- lm(formula = mpg ~ hp, data = mtcars)
lm_mod
# get summary of model output -----------------------------------------------
summary(lm_mod)
# pass the output from one S3 generic to another S3 generic -----------------
coef(summary(lm_mod))
#| label: my_list
#| collapse: true
my_list
#| label: tolower_my_list
#| collapse: true
tolower(my_list) |> str()
my_words <- my_list[['words']]
tolower(my_words)
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
#| label: my_list_purrr_standard
#| results: hold
purrr::map(.x = my_list, .f = tolower)
#| label: my_list_purrr_anonymous
#| results: hold
my_list |> purrr::map(\(x) tolower(x))
#| label: my_list_purrr_test_waldo
#| results: hold
waldo::compare(
x = purrr::map(.x = my_list, .f = tolower),
y = my_list |> purrr::map(\(x) tolower(x)))
**Anonymous function syntax:**
