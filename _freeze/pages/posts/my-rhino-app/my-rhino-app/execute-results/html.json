{
  "hash": "bfd1f8428727dd16aab8692ba53cccc5",
  "result": {
    "markdown": "---\ntitle: \"Shiny frameworks (part 5, `rhino`)\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-03-03\"\ncategories: [shiny, code, packages]\nimage: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n\nfig-align: center\ncode-link: true\nfontsize: '10'\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n\n\n\n<!--\nhttps://mjfrigaard.github.io/posts/vanilla-shiny/\n\nhttps://mjfrigaard.github.io/posts/my-pkg-app/\n\nhttps://mjfrigaard.github.io/posts/my-golem-app/\n\nhttps://mjfrigaard.github.io/posts/my-leprechaun-app/\n\nhttps://mjfrigaard.github.io/posts/my-rhino-app/\n-->\n\n\nThis is the fifth and final post on creating shiny apps with various frameworks. In this post, I'll build a *'high quality, enterprise-grade'* shiny app using the [`rhino`](https://appsilon.github.io/rhino/index.html) package and framework.\n\n\n\n:::: {.callout-important collapse='false'}\n\n## ALERT!\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\n**This post is currently under development. Thank you for your patience.**\n\n::: \n\n::::\n\n\n\n## Framework comparisons \n\nThis series has focused on the following technical areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app with the framework (from the console and IDE), and any additional packages or dependencies.\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (like CSS or JavaScript), testing, etc. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE), common workflow tips, and any points I found confusing.   \n\n+ In part one, I built a 'minimal' shiny app ([`VanillaApp`](https://mjfrigaard.github.io/posts/vanilla-shiny/))  \n\n+ In part two, I structured the shiny application as an R package using [`usethis`](https://usethis.r-lib.org/) and [`devtools`](https://devtools.r-lib.org/), [`myPkgApp`](https://mjfrigaard.github.io/posts/my-pkg-app/).\n\n+ In part three, I used the popular [`golem` framework](https://thinkr-open.github.io/golem/), [`myGolemApp`](https://mjfrigaard.github.io/posts/my-golem-app/).\n\n+ In part four, I created a shiny app using the [`leprechaun` package](https://leprechaun.opifex.org/#/) and framework, [`myLeprechaunApp`](https://mjfrigaard.github.io/posts/my-leprechaun-app/) \n\nThe GitHub repo with all shiny app setups is [here](https://github.com/mjfrigaard/shiny-app-setups).\n\n<br>\n\n# `myRhinoApp`\n\n\n`rhino` is a package developed by [Appsilon](https://appsilon.com/) (yes, [`shinyconf` Appsilon](https://shinyconf.appsilon.com/)) for \"*Build[ing] high quality, enterprise-grade Shiny apps at speed.*\" \n\n`rhino` differs from the previous frameworks and methods in a couple important ways. First, a `rhino` application **is not an R package**. Instead, `rhino` shiny apps rely on [`box`](https://klmr.me/box/) for managing importing dependencies  (instead of the `DESCRIPTION` and `NAMESPACE`). Second, `rhino` requires [node.js](https://www.wikiwand.com/en/Node.js), open-source JavaScript runtime environment.\n\n\n## Start\n\nTo create a new rhino application, select **Project** > **New Project** > **New Directory**, and **Shiny Application using rhino**\n\nThe **New Project Wizard** will require a *Directory name* and *subdirectory*. I've also left *Github Actions CI* selected (the default)\n\n::: {#fig-rhino-setup .column}\n![](rhino-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`myRhinoApp`\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n*Click __Code__ to see output*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\n* Initializing project ...\n* Discovering package dependencies ... Done!\n* Copying packages into the cache ... Done!\nThe following package(s) will be updated in the lockfile:\n\n# CRAN ===============================\n- R.cache        [* -> 0.16.0]\n- R.methodsS3    [* -> 1.8.2]\n\n  < < < < < < < OMITTED > > > > > > > >\n\n- xtable         [* -> 1.8-4]\n- yaml           [* -> 2.3.7]\n\n# GitHub =============================\n- box            [* -> klmr/box@dev]\n\nThe version of R recorded in the lockfile will be updated:\n- R              [*] -> [4.2.2]\n\n* Lockfile written to '~/projects/myRhinoApp/renv.lock'.\n✔ Initialized renv.\n✔ Application structure created.\n✔ Unit tests structure created.\n✔ E2E tests structure created.\n✔ Github Actions CI added.\n```\n:::\n\n:::\n\nThis initializes the new `rhino` app by opening the `.Rproj` file in RStudio.\n\nIf I wanted to create the `myRhinoApp` application from the console, I would use the following: \n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"rhino\")\nrhino::init(\"/Users/mjfrigaard/projects/myRhinoApp\")\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n*Click __Code__ to see output*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\n✔ Rproj file created.\n* Initializing project ...\n* Discovering package dependencies ... Done!\n* Copying packages into the cache ... Done!\nThe following package(s) will be updated in the lockfile:\n\n# CRAN ===============================\n- R.cache        [* -> 0.16.0]\n- R.methodsS3    [* -> 1.8.2]\n\n  < < < < < < < OMITTED > > > > > > > >\n\n- xtable         [* -> 1.8-4]\n- yaml           [* -> 2.3.7]\n\n# GitHub =============================\n- box            [* -> klmr/box@dev]\n\nThe version of R recorded in the lockfile will be updated:\n- R              [*] -> [4.2.2]\n\n* Lockfile written to '~/projects/myRhinoApp/renv.lock'.\n✔ Initialized renv.\n✔ Application structure created.\n✔ Unit tests structure created.\n✔ E2E tests structure created.\n✔ Github Actions CI added.\n```\n:::\n\n:::\n\n\n\n:::: {.callout-note collapse='false'}\n\n## What's the difference?\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\nBoth methods create the same structure, using `rhino::init()` will not automatically open the new rhino application project file (`~/projects/myRhinoApp/myRhinoApp.Rproj`), so I have to navigate to this file and open it.\n\n::: \n\n::::\n\n\nThe initial folder structure for a new rhino app is below: \n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nmyRhinoApp/\n      ├── app/\n      │   ├── js\n      │   │   └── index.js\n      │   ├── logic\n      │   │   └── __init__.R\n      │   ├── main.R\n      │   ├── static\n      │   │   └── favicon.ico\n      │   ├── styles\n      │   │   └── main.scss\n      │   └── view\n      │       └── __init__.R\n      ├── app.R\n      ├── config.yml\n      ├── dependencies.R\n      ├── myRhinoApp.Rproj\n      ├── renv/\n      │   ├── activate.R\n      │   ├── library\n      │   │   └── R-4.2\n      │   ├── sandbox\n      │   │   └── R-4.2\n      │   └── settings.dcf\n      ├── renv.lock\n      ├── rhino.yml\n      └── tests/\n          ├── cypress\n          │   └── integration\n          ├── cypress.json\n          └── testthat\n              └── test-main.R\n\n16 directories, 16 files\n```\n:::\n\n:::\n\nThe `rhino` package website has [excellent documentation on their app structure philosophy](https://appsilon.github.io/rhino/articles/explanation/application-structure.html), and it's worth reading through this before getting started. I'll do my best to summarize the application's files below:\n\n### `app/`\n\nThe `app/` folder contains the primary folder and files for my application. \n\n-   `app/` includes the following files and sub-folders: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    app/\n      ├── js/\n      │   └── index.js\n      ├── logic/\n      │   └── __init__.R\n      ├── main.R\n      ├── static/\n      │   └── favicon.ico\n      ├── styles/\n      │   └── main.scss\n      └── view/\n          └── __init__.R\n    \n    6 directories, 6 files\n    ```\n    :::\n\n    :::\n\n\n-   `js/`: the `js` folder initially contains a blank `index.js` script  \n  \n-   `logic/`: the `logic` folder contains [*code independent from Shiny*](https://appsilon.github.io/rhino/articles/explanation/application-structure.html#logic)\n      \n    -   `logic/__init__.R` is originally blank, but provides a link to the website section on project structure  \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # Logic: application code independent from Shiny.\n    # https://go.appsilon.com/rhino-project-structure\n    ```\n    :::\n\n    :::\n  \n-   `static/`: the `static/` folder will contain external resources (like JavaScript files) and is similar to the sub-folders in `inst/` from `golem` and `leprechaun`. \n\n    -   Use these file in the UI with: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    tags$script(src = \"static/js/app.min.js\")\n    ```\n    :::\n\n    :::\n  \n-   `styles/`: the `styles/` folder will hold custom styles (CSS and HTML) in the `styles/main.css` file (which is initially blank)\n  \n-   `view/`: the `view/` folder holds the [*code which describes the user interface of your application and relies upon the reactive capabilities of Shiny.*](https://appsilon.github.io/rhino/articles/explanation/application-structure.html#view)\n\n    -   `view/__init__.R` is also intially blank, but provides a link to the website section on project structure  \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # View: Shiny modules and related code.\n    # https://go.appsilon.com/rhino-project-structure\n    ```\n    :::\n\n    :::\n    \n-   `main.R`: the `main.R` file contains the *actual* application code (this is where I'll make edits).\n\n    -   `app/main.R` contains the code for the application I see when I run `rhino::app()`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    *Click __Code__ to see `app/main.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    box::use(\n      shiny[bootstrapPage, moduleServer, NS, renderText, tags, textOutput],\n    )\n    \n    #' @export\n    ui <- function(id) {\n      ns <- NS(id)\n      bootstrapPage(\n        tags$h3(\n          textOutput(ns(\"message\"))\n        )\n      )\n    }\n    \n    #' @export\n    server <- function(id) {\n      moduleServer(id, function(input, output, session) {\n        output$message <- renderText(\"Hello!\")\n      })\n    }\n    ```\n    :::\n\n    :::\n    \n<br>\n\n\n\n:::: {.callout-important collapse='false'}\n\n## `box::use()`?\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\nIf `box`'s syntax looks strange--don't worry! It looked strange to me too at first. But it's actually something special with those `roxygen2` tags. I'll cover it more in the **Build** section below.\n\n::: \n\n::::\n\n\n\n### `app.R`\n\n-   `app.R` is the file that will run my application and contains the `rhino::app()` function. \n\n    ::: {style=\"font-size: 0.95em; color: #E74A2F;\"}\n    **Do not edit this file!**\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # Rhino / shinyApp entrypoint. Do not edit.\n    rhino::app()\n    ```\n    :::\n\n    :::\n    \n    -   `rhino` has a 'minimal `app.R`' [philosophy](https://appsilon.github.io/rhino/articles/explanation/application-structure.html#minimal-app-r), and the call to `rhino::app()` [performs multiple operations](https://appsilon.github.io/rhino/reference/app.html) beyond `shiny::runApp()`\n\n\n### `config.yml`\n\n-   `config.yml` is a YAML file that follows the [`config` package](https://rstudio.github.io/config/) format. This file initially contains two calls to `Sys.getenv()`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ``` YAML\n    default:\n      rhino_log_level: !expr Sys.getenv(\"RHINO_LOG_LEVEL\", \"INFO\")\n      rhino_log_file: !expr Sys.getenv(\"RHINO_LOG_FILE\", NA)\n    ```\n    :::\n    \n    - Read more about how to use `config.yml` in the **Environments** section of the [How to: Manage secrets and environments](https://appsilon.github.io/rhino/articles/how-to/manage-secrets-and-environments.html?#environments) vignette.\n\n\n### `dependencies.R`\n\n-   `dependencies.R` is an `.R` script that contains any other packages used by the application. Using this file is covered in the [Manage Dependencies vignette](https://appsilon.github.io/rhino/articles/how-to/manage-r-dependencies.html) on the package website, and I've covered `renv` in the [first application (`VanillaShiny`)](https://mjfrigaard.github.io/posts/vanilla-shiny/#renv). \n\n    -   As I can see from the note in the comments, the dependencies will be tracked using `packrat` in rsconnect. \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # This file allows packrat (used by rsconnect during deployment)\n    # to pick up dependencies.\n    library(rhino)\n    ```\n    :::\n\n    :::\n    \n    -   I know I'll be using `ggplot2` and `stringr` in this application, so I'll load those there.\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # This file allows packrat (used by rsconnect during deployment)\n    # to pick up dependencies.\n    library(rhino)\n    library(ggplot2)\n    library(stringr)\n    ```\n    :::\n\n    :::\n    \n    -   Now I `install` and take a snapshot with `renv`:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    renv::install(c(\"ggplot2\", \"stringr\"))\n    renv::snapshot()\n    ```\n    :::\n\n    :::\n    \n\n\n### `renv/`\n\n-   The `renv/` folder contains the R version and packages used to build the application: \n\n    -   `renv.lock` is the lock file and contains the packages and R version used in the application.\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    myRhinoApp/\n      ├── renv/\n      │    ├── activate.R\n      │    ├── library/\n      │    │   └── R-4.2\n      │    │       └── x86_64-apple-darwin17.0\n      │    ├── sandbox/\n      │    │   └── R-4.2\n      │    │       └── x86_64-apple-darwin17.0\n      │    └── settings.dcf\n      └── renv.lock\n    ```\n    :::\n\n    :::\n\n    -   Read more about [getting started with `renv`](https://rstudio.github.io/renv/articles/renv.html) and using [`renv` in package development](https://rstudio.github.io/renv/articles/packages.html)\n\n\n### `rhino.yml`\n\n-   `rhino.yml` is the configuration file and contains options for setting how Sass is built or for importing from another application structure to `rhino`.\n\n    - the code below showcases the optional arguments (and is not included in the application)\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ``` YAML\n    sass: string               # required | one of: \"node\", \"r\"\n    legacy_entrypoint: string  # optional | one of: \"app_dir\", \"source\", \"box_top_level\"\n    ```\n    :::\n    \n    - Read more about `rhino.yml` in the [Explanation: Configuring Rhino - rhino.yml](https://appsilon.github.io/rhino/articles/explanation/rhino-yml.html) vignette.\n\n\n### `tests/`\n\n-   `tests/` contains two sub-folders, `cypress/` and `testthat/`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    tests/\n        ├── cypress/\n        │   └── integration/\n        │       └── app.spec.js\n        ├── cypress.json\n        └── testthat/\n            └── test-main.R\n    ```\n    :::\n\n    :::\n\n\n\n#### `cypress/`\n\n-   `tests/cypress/` holds folders for using the [Cypress web and component testing framework](https://www.cypress.io/). \n\n    -   This is also covered in the ['Use `shinttest2` vignette'](https://appsilon.github.io/rhino/articles/how-to/use-shinytest2.html).\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ```bash\n    tests/\n        ├── cypress/\n        │    └── integration/\n        │        └── app.spec.js\n        └── cypress.json\n    ```\n    :::\n    \n\n#### `testthat/`\n\n-   `tests/testthat/` contains the architecture for writing tests with [testthat](https://testthat.r-lib.org/)\n\n    -   `rhino` also has a helper function for running all tests in the `testthat/` folder ([`rhino::test_r()`](https://appsilon.github.io/rhino/reference/test_r.html))\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ```bash\n    tests/\n        └── testthat/\n                └── test-main.R\n    ```\n    :::\n\n\n## Build\n\nUnlike the previous applications in this series, `rhino` applications don't use the `NAMESPACE` and `DESCRIPTION` to manage dependencies. Instead, they use the `box` modules to explicitly import packages and functions\n\n### `box`\n\n::: {layout-ncol=1}\n![](box-logo.png){width=1in fig-align=\"right\"}\n:::\n\n`rhino` apps use [`box`](https://klmr.me/box/index.html) to create modules, which is handy, because it's specifically designed for writing \"*reusable, composable and modular R code*\"\n\n**Quick refresher:** if I'm building a shiny app, \n\n-   I install dependencies using `install.packages('<package>')` (or `renv::install('<package>')`)\n\n-   When I want to use an installed package, I run `library(<package>)`, which loads the package namespace '*and attach[es] it on the search list*' (or I can use `<package>::<function>`)\n\n-   If the application gets converted into an R package, I track these dependencies using `roxygen2` tags `@importFrom` or `@import` (which are converted into `NAMESPACE` directives) \n\n-   I also include them in the `DESCRIPTION` under `Imports:`\n\nSo, I run `library(<package>)` to load the entire package namespace when I want to use a function, but it's recommended I use `@importFrom` to *specify* the package functions if I'm developing my own R package.\n\nPut another way, \n\n*\"If I only need one or two items from a package, why am I loading* **everything** *in the namespace with `library()`?\"*\n\nThis is where [`box`](https://klmr.me/box/index.html) comes in--it's designed to *'completely replace the base R `library` and `require` functions'*.\n\n[`box`](https://klmr.me/box/index.html) handles dependencies by *'writing modular code'* and is perhaps best summarized in the following quote from [The Zen of Python](https://peps.python.org/pep-0020/) (also on the [package website](https://klmr.me/box/index.html#why-box))\n\n> '*explicit is better than implicit.*'\n\nA `box` module is essentially just an R script in a folder. However, in `box::use()`, instead of loading packages and functions using `library()` or `::`, I can **encapsulate and explicitly import packages and functions** in these R scripts using the syntax `package[function]`. \n\n-   The module below imports the `foo()` and `bar()` functions from the `pkg` package in the `mod.R` file (in the `box/` folder)\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ``` r\n    # contents of box/mod.R\n    #' @export\n    box::use(\n      pkg[foo, bar]\n    )\n    ```\n    :::\n\n-   I can now access `foo()` and `bar()` from `mod.R` using `box::use(box/mod)`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ``` r\n    # using contents of box/mod.R\n    box::use(\n      box/mod\n    )\n    ```\n    :::\n\n\n#### `box` modules\n\nHere is a quick example:\n\n-   Below I attempt to use `tidyverse`s `tidyverse_logo()` function \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tidyverse_logo()\n    ```\n    \n    ::: {.cell-output .cell-output-error}\n    ```\n    Error in tidyverse_logo(): could not find function \"tidyverse_logo\"\n    ```\n    :::\n    :::\n\n    :::\n    \n    -   The error is expected, because `dplyr` has been installed, but hasn't been loaded. \n\n-   In a `box` module, I import the `tidyverse_logo()` from `tidyverse` (without using `library()` or `::`), by creating a `logo.R` file in a `tidy` folder. In  `logo.R`, I include `box::use()` and the following code:\n    \n    - I also include `#' @export` on the preceding line:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # contents of tidy/logo.R\n    #' @export\n    box::use(\n      tidyverse[tidyverse_logo]\n    )\n    ```\n    :::\n\n    :::\n    \n    -   Note I did not have to use `tidyverse::tidyverse_logo()`\n\n-   To use this module, I call `box::use(tidy/logo)`, which loads `logo` into the environment. \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    box::use(tidy/logo)\n    ls(logo)\n    ```\n    :::\n\n    \n    ```bash\n     <module: tidy/logo>\n    ```\n    :::\n    \n    -   I can use `ls()` on `logo` to return the imported names. \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ls(logo)\n    ```\n    :::\n\n    \n    ```bash\n    [1] \"tidyverse_logo\"\n    ```\n    :::\n    \n-   To use the `tidyverse_logo()` function, I use `$`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    logo$tidyverse_logo()\n    ```\n    :::\n\n    \n    ```bash\n    ⬢ __  _    __   .    ⬡           ⬢  . \n     / /_(_)__/ /_ ___  _____ _______ ___ \n    / __/ / _  / // / |/ / -_) __(_-</ -_)\n    \\__/_/\\_,_/\\_, /|___/\\__/_/ /___/\\__/ \n         ⬢  . /___/      ⬡      .       ⬢ \n    ```\n    :::\n\n-   Note that `tidyverse_logo()` is still not loaded *outside* the `logo` module\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tidyverse_logo()\n    ```\n    \n    ::: {.cell-output .cell-output-error}\n    ```\n    Error in tidyverse_logo(): could not find function \"tidyverse_logo\"\n    ```\n    :::\n    :::\n\n    :::\n\nI can also include (or wrap) `box::use()` inside custom functions, and then call these when I've imported the module: \n\n-   `tidy/plogo.R` imports `tidyverse_logo()` *inside* a custom function, `print_logo()`\n\n    -   Note that to use a packages/functions from a module, you must include `#' @export` from `roxygen2` (in the line above):\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # contents of tidy/plogo.R\n    \n    #' prints tidyverse logo\n    #' @export\n    print_logo <- function() {\n      # import pkg[fun] inside function\n      box::use(\n        tidyverse[tidyverse_logo]\n      )\n      # use fun\n      tidyverse_logo()\n    }\n    ```\n    :::\n\n    :::\n    \n    -   I load the module into the environment with `box::use(path/to/module)`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # use tidy/plogo\n    box::use(tidy/plogo)\n    plogo\n    ```\n    :::\n\n    \n    ``` bash\n    <module: tidy/plogo>\n    ```\n    :::\n    \n    -   I can use the `print_logo()` function the same way I used `tidyverse_logo()` in the `logo` module.\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # access print_logo() with $\n    plogo$print_logo()\n    ```\n    :::\n\n    \n    ```bash\n    ⬢ __  _    __   .    ⬡           ⬢  . \n     / /_(_)__/ /_ ___  _____ _______ ___ \n    / __/ / _  / // / |/ / -_) __(_-</ -_)\n    \\__/_/\\_,_/\\_, /|___/\\__/_/ /___/\\__/ \n         ⬢  . /___/      ⬡      .       ⬢ \n    ```\n    :::\n\n-   Also note `print_logo()` doesn't exist outside the `plogo` module: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    print_logo()\n    ```\n    \n    ::: {.cell-output .cell-output-error}\n    ```\n    Error in print_logo(): could not find function \"print_logo\"\n    ```\n    :::\n    :::\n\n    :::\n    \n    -   This is what is meant by *encapsulation*\n\n`box` modules can also import functions and packages using aliases. \n\n-   The example below (`tidy/tidy_logo.R`) exports `tidyverse_logo()` as `tidy_logo()` and `print_logo()`\n\n    -   Both the contents of `box::use()` and `print_logo()` need the `#' @export` tag \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # contents of tidy/tidy_logo.R\n    \n    #' import alias tidyverse logo\n    #' @export\n    box::use(\n      tidyverse[tidy_logo = tidyverse_logo]\n    )\n    \n    #' prints tidyverse logo\n    #' @export\n    print_logo <- function() {\n      # use fun alias\n      tidy_logo()\n    }\n    ```\n    :::\n\n    :::\n\n    - After I load the module with `box::use()`, I can see both functions in `tidy_logo` using `ls()`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    box::use(tidy/tidy_logo)\n    ls(tidy_logo)\n    ```\n    :::\n\n\n    ```bash\n    [1] \"print_logo\" \"tidy_logo\"\n    ```\n    :::\n    \n    -   If I compare both functions, I find they are identical:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    identical(\n      x = tidy_logo$print_logo(),\n      y = tidy_logo$tidy_logo()\n    )\n    ```\n    :::\n\n    \n    ```bash\n    [1] TRUE\n    ```\n    :::\n    \nThere are multiple methods for importing packages and functions with `box`. The table below list a few of these options:\n\n::: {style=\"font-size: 0.60em;\"}\n\n\n\n:::: {.callout-note collapse='false'}\n\n## **`box::use()` options**\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Inside box::use() </th>\n   <th style=\"text-align:left;\"> Action </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg\n    ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg', does not attach any function names </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      p = pkg\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' with alias ('p'), does not attach any function names </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg = pkg[foo, bar]\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' and attaches the function names 'pkg::foo()' and 'pkg::bar()' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg[my_foo = foo, ...]\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' with alias for 'foo' ('my_foo') and attaches all exported function names </td>\n  </tr>\n</tbody>\n</table>\n\n::: \n\n::::\n\n\n:::\n\n::: {style=\"font-size: 0.85em; color: [#E74A2F;\"}\n*These options are also listed on the [package website](https://klmr.me/box/index.html)*\n:::\n\nThis has been a very brief overview of `box`, so I **highly recommend** consulting the [`box` website](https://klmr.me/box/index.html) and vignettes (especially [\"the hierarchy of module environments\"](https://klmr.me/box/articles/mod-env-hierarchy.html)). The `rhino` website also has a great overview on using [`box` with shiny apps](https://appsilon.github.io/rhino/articles/explanation/box-modules.html) (I also have a collection of `box` module examples in this [repo](https://github.com/mjfrigaard/rbox/blob/main/boxes.md).)\n\n### Modules \n\nNow that I've covered a bit on how `box` modules work, I am going to create the *application* modules. New modules should be created in the `app/view/` folder. \n\nThe first module we'll create is the `app/view/inputs.R` module for collecting the user inputs\n\n-   The code below is placed in `app/view/inputs.R`\n\n    ::: {style=\"font-size: 0.80em;\"}\n    *Click __Code__ to see `app/view/inputs.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    # app/view/inputs.R\n    \n    # define module functions\n    box::use(\n      shiny[\n        NS, tagList, selectInput, h3,\n        sliderInput, textInput, moduleServer, reactive\n      ],\n    )\n    \n    #' input values UI\n    #' @export\n    ui <- function(id) {\n      ns <- NS(id)\n      tagList(\n        selectInput(\n          inputId = ns(\"y\"),\n          label = \"Y-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"audience_score\"\n        ),\n        selectInput(\n          inputId = ns(\"x\"),\n          label = \"X-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"imdb_rating\"\n        ),\n        selectInput(\n          inputId = ns(\"z\"),\n          label = \"Color by:\",\n          choices = c(\n            \"Title Type\" = \"title_type\",\n            \"Genre\" = \"genre\",\n            \"MPAA Rating\" = \"mpaa_rating\",\n            \"Critics Rating\" = \"critics_rating\",\n            \"Audience Rating\" = \"audience_rating\"\n          ),\n          selected = \"mpaa_rating\"\n        ),\n        sliderInput(\n          inputId = ns(\"alpha\"),\n          label = \"Alpha:\",\n          min = 0, max = 1, step = 0.1,\n          value = 0.5\n        ),\n        sliderInput(\n          inputId = ns(\"size\"),\n          label = \"Size:\",\n          min = 0, max = 5,\n          value = 2\n        ),\n        textInput(\n          inputId = ns(\"plot_title\"),\n          label = \"Plot title\",\n          placeholder = \"Enter plot title\"\n        )\n      )\n    }\n    \n    #' input values server\n    #' @export\n    server <- function(id) {\n      moduleServer(id, function(input, output, session) {\n        return(\n          list(\n            \"x\" = reactive({\n              input$x\n            }),\n            \"y\" = reactive({\n              input$y\n            }),\n            \"z\" = reactive({\n              input$z\n            }),\n            \"alpha\" = reactive({\n              input$alpha\n            }),\n            \"size\" = reactive({\n              input$size\n            }),\n            \"plot_title\" = reactive({\n              input$plot_title\n            })\n          )\n        )\n      })\n    }\n    ```\n    :::\n\n    :::\n    \n#### Init files \n\nBack in the `app/view/` folder, I want to use the `app/view/inputs.R` function in the `app/main.R`. I can do this by adding a `__init__.R` file in the `app/view/` folder with the following contents: \n\n-   The `__init__.R` files are covered [on the `rhino` website](https://appsilon.github.io/rhino/articles/explanation/box-modules.html#init-files): \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # View: Shiny modules and related code.\n    # https://go.appsilon.com/rhino-project-structure\n    #' @export\n    box::use(\n      app/view/inputs)\n    ```\n    :::\n\n    :::\n    \n-   After composing the module in `app/view/input.R`, I add the `input` module to the `app/main.R` file just like the examples above: \n\n    -   Note that I've added the necessary functions for using a `fluidPage()` layout (instead of the default `bootstrapPage()`)\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    *Click __Code__ to see `app/main.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # app/main.R\n    box::use(\n      shiny[\n        NS, fluidPage, sidebarLayout, sidebarPanel, mainPanel,\n        tags, textOutput, moduleServer, renderText\n      ],\n    )\n    # load inputs module ----\n    box::use(\n      app/view/inputs,\n    )\n    \n    #' @export\n    ui <- function(id) {\n      ns <- NS(id)\n      fluidPage(\n        sidebarLayout(\n          sidebarPanel(\n            # use inputs module UI ----\n            inputs$ui(ns(\"vals\"))\n          ),\n          mainPanel(\n            tags$h3(\"myRhinoApp\"),\n            tags$h3(textOutput(ns(\"message\")))\n          )\n        )\n      )\n    }\n    \n    #' @export\n    server <- function(id) {\n      moduleServer(id, function(input, output, session) {\n        # use inputs module server ----\n        inputs$server(\"vals\")\n        output$message <- renderText(\"Hello!\")\n      })\n    }\n    ```\n    :::\n\n    :::\n\nAfter saving both `app/view/inputs.R` and `app/main.R`, I can click **Run App** in `app.R` and check the output: \n\n\n::: {#fig-input-module .column}\n![](input_module.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`inputs.R` module\n:::\n\nThe `display.R` module will show the graph output, but I know this module will require adding the `movies` data *and* the `point_plot()` function (both of which I'll cover below). \n\n#### Logic \n\n`rhino` apps come with an `app/logic/` folder, which is used to store code for [*\"data manipulation, generating non-interactive plots and graphs, or connecting to an external data source, but outside of definable inputs, it doesn’t interact with or rely on shiny in any way.\"*](https://appsilon.github.io/rhino/articles/explanation/application-structure.html#logic)\n\n-   The `point_plot()` function definitely meets the definition above, so I will write two modules in `app/logic`: `data` for importing the `movies` data, and `plot` for creating a scatter plot with `point_plot()` \n\n    -   `app/logic/data.R`: imports `movies` from my [GitHub repo](https://github.com/mjfrigaard/shiny-app-setups/blob/main/data/movies.csv) with all the shiny frameworks. Using data in `box()` modules is tricky (and its a [known](https://appsilon.github.io/rhino/articles/explanation/box-modules.html#known-issues), [issue](https://github.com/klmr/box/issues/219)), but this method works for my application. \n    \n    ::: {style=\"font-size: 0.80em;\"}\n    *Click __Code__ to see `app/logic/data.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # contents of app/logic/data.R\n    #' @export\n    box::use(\n      readr[get_csv = read_csv, cols]\n    )\n    \n    #' @export\n    movies_data <- function() {\n      raw_csv_url <- \"https://bit.ly/3Jds4g1\"\n      # use alias for read_csv()\n      get_csv(raw_csv_url, col_types = cols())\n    }\n    ```\n    :::\n\n    :::\n    \n    -   The second module, `app/logic/plot.R`, holds the `point_plot()` function: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # contents of app/logic/plot.R\n    #' point plot function\n    #' @export\n    point_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    \n    box::use(\n      ggplot2 = ggplot2[...]\n    )\n    \n      ggplot(\n        data = df,\n        aes(\n          x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]]\n        )\n      ) +\n        geom_point(alpha = alpha_var, size = size_var)\n    }\n    ```\n    :::\n\n    :::\n    \n    -   The `__init__.R` file in `app/logic` contains the following: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # Logic: application code independent from Shiny.\n    # https://go.appsilon.com/rhino-project-structure\n    #' @export\n    box::use(\n      app/logic/data,\n      app/logic/plot)\n    ```\n    :::\n\n    :::\n    \n    -   To make sure everything is working, I'll also include a `app/logic/check-point_plot.R` file that contains the following:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # contents of app/logic/check-point_plot.R\n    # contents for app/logic/check-point_plot.R\n    \n    # load modules from logic folder\n    box::use(\n      app/logic/data,\n      app/logic/plot\n    )\n    \n    # import movies data\n    movies <- data$movies_data()\n    \n    # check point plot\n    plot$point_plot(\n      df = movies,\n      x_var = 'critics_score', # as string\n      y_var = 'imdb_rating', # as string\n      col_var = 'mpaa_rating', # as string\n      alpha_var = 2 / 3,\n      size_var = 2\n    )\n    ```\n    :::\n\n    :::\n    \n    -   `check-point_plot.R` imports the two logic modules (`data` and `plot`), creates the movies data, and checks to see if the data and plotting function work: \n    \n-   After saving `app/logic/data.R` and `app/logic/plot.R`, I can run the code in `check-point_plot.R` \n\n::: {#fig-check-point-plot .column}\n![](check-point-plot.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`app/logic/check-point_plot.R` module\n:::\n\nThe `app/view/display.R` module can now call `box::use()` to import the `app/logic/data` and `app/logic/plot`.\n    \n-   The `app/view/display.R` module contains the`ui` and the `server` functions:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    # app/view/display.R\n    # import data and plot modules ----\n    box::use(\n      app/logic/data,\n      app/logic/plot\n    )\n    \n    #' display values ui ----\n    #' @export\n    ui <- function(id) {\n    box::use(\n      shiny[NS, tagList, tags, plotOutput]\n    )\n      ns <- NS(id)\n      tagList(\n        tags$br(),\n        tags$blockquote(\n          tags$em(\n            tags$h6(\n              \"The code for this application comes from the \",\n              tags$a(\"Building web applications with Shiny\",\n                href = \"https://rstudio-education.github.io/shiny-course/\"\n              ),\n              \"tutorial\"\n            )\n          )\n        ),\n        plotOutput(outputId = ns(\"scatterplot\"))\n      )\n    }\n    \n    #' display values server ----\n    #' @export\n    server <- function(id, var_inputs) {\n    \n    # load plotting, shiny, tools, and stringr functions\n    box::use(\n      ggplot2 = ggplot2[...],\n      shiny[NS, moduleServer, plotOutput, reactive, renderPlot],\n      tools[toTitleCase],\n      stringr[str_replace_all]\n    )\n    \n      moduleServer(id, function(input, output, session) {\n    \n        # use data$movies_data() ----\n        movies <- data$movies_data()\n    \n          inputs <- reactive({\n            plot_title <- toTitleCase(var_inputs$plot_title())\n            list(\n              x = var_inputs$x(),\n              y = var_inputs$y(),\n              z = var_inputs$z(),\n              alpha = var_inputs$alpha(),\n              size = var_inputs$size(),\n              plot_title = plot_title\n            )\n          })\n    \n        output$scatterplot <- renderPlot({\n          # use plot$point_plot() ----\n          plot <- plot$point_plot(\n            df = movies,\n            x_var = inputs()$x,\n            y_var = inputs()$y,\n            col_var = inputs()$z,\n            alpha_var = inputs()$alpha,\n            size_var = inputs()$size\n          )\n          plot +\n            labs(\n              title = inputs()$plot_title,\n              x = str_replace_all(\n                toTitleCase(\n                  inputs()$x\n                ),\n                \"_\",\n                \" \"\n              ),\n              y = str_replace_all(\n                toTitleCase(\n                  inputs()$y\n                ),\n                \"_\",\n                \" \"\n              )\n            ) +\n            theme_minimal() +\n            theme(legend.position = \"bottom\")\n        })\n      })\n    }\n    ```\n    :::\n\n    :::\n\nIn `app/main.R`, I can place the `display` module in call to `box::use()`, then:\n\n-   Add `display$ui()` to the `mainPanel()`  \n\n-   In the `server`, the output from `inputs$server()` is assigned to `selected_vars`, which becomes the `var_inputs` input for `display$server()`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # app/view/main.R\n    \n    # shiny functions\n    box::use(\n      shiny[NS, fluidPage, sidebarLayout, sidebarPanel,\n            mainPanel, tags, textOutput, moduleServer,\n            renderText]\n    )\n    \n    # import modules\n    box::use(\n      # load inputs module ----\n      app/view/inputs,\n      # load display module ----\n      app/view/display\n    )\n    \n    #' myRhinoApp ui\n    #' @export\n    ui <- function(id) {\n      ns <- NS(id)\n      fluidPage(\n        sidebarLayout(\n          sidebarPanel(\n            # use inputs module UI ----\n            inputs$ui(ns(\"vals\"))\n          ),\n          mainPanel(\n            tags$h3(\"myRhinoApp\"),\n            tags$h3(textOutput(ns(\"message\"))),\n            # use display module UI ----\n            display$ui(ns(\"disp\"))\n          )\n        )\n      )\n    }\n    \n    #' myRhinoApp server\n    #' @export\n    server <- function(id) {\n      moduleServer(id, function(input, output, session) {\n        # use inputs module server ----\n        selected_vars <- inputs$server(id = \"vals\")\n        # use display module server ----\n        display$server(id = \"disp\",\n                       var_inputs = selected_vars)\n      })\n    }\n    ```\n    :::\n\n    :::\n    \n\nAfter saving `app/view/data.R` and `app/view/display.R` files, the `app/view/` and `app/logic/` folders contain the following modules: \n\n-   `app/logic/`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    app/logic/\n          ├── __init__.R\n          ├── check-point_plot.R\n          ├── data.R\n          └── plot.R\n    \n    1 directory, 4 files\n    ```\n    :::\n\n    :::\n    \n-   `app/view/`:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    app/view/\n          ├── __init__.R\n          ├── display.R\n          └── inputs.R\n    \n    1 directory, 3 files\n    ```\n    :::\n\n    :::\n\nWhen I click **Run App** in `app.R` I should see the following output:\n\n::: {#fig-complete-rhino .column}\n![](complete-rhino.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`myRhinoApp`\n:::\n    \n    \n### External scripts\n\nIt's fairly straightforward to add external resources (i.e., JavaScript, CSS, Sass, etc.) to `rhino` apps. I'll use the [example from the website](https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html#add-javascript-code) to demonstrate because it adds *both* CSS and JavaScript to the codebase.\n\n-   The first place to add code is the UI in `app/main.R`:\n\n    -   Update the call to `box::use()` and include the layout functions (`fluidRow`, `column`, `icon`)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # app/view/main.R\n    \n    # shiny functions\n    box::use(\n      shiny[\n        NS, fluidPage, sidebarLayout, sidebarPanel,\n        mainPanel, fluidRow, column, tags, icon,\n        textOutput, moduleServer, renderText\n      ]\n    )\n    ```\n    :::\n\n    :::\n    \n    -   Update the `mainPanel()` to include the title, info button, and display module: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n      mainPanel(\n        fluidRow(\n          column(\n            width = 12,\n            tags$h3(\"myRhinoApp\")\n          )\n        ),\n        fluidRow(\n          column(\n            width = 1,\n            offset = 11,\n            # example info button ---\n            tags$button(\n              id = \"help-button\",\n              icon(\"info\")\n            )\n          )\n        ),\n        fluidRow(\n          column(\n            width = 12,\n            # use display module UI ----\n            display$ui(ns(\"disp\"))\n          )\n        )\n      )\n    ```\n    :::\n\n    :::\n    \n    -   The CSS added to `app/styles/main.css` is the `container` for the button.\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ```css\n    // app/styles/main.scss\n    \n    .components-container {\n      display: inline-grid;\n      grid-template-columns: 1fr 1fr;\n      width: 100%;\n    \n      .component-box {\n        padding: 10px;\n        margin: 10px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n      }\n    }\n    \n    h1 {\n      text-align: center;\n      font-weight: 900;\n    }\n    \n    #help-button {\n      position: fixed;\n      top: 0;\n      right: 0;\n      margin: 10px;\n    }\n\n    ```\n    :::\n    \n    -   Run `rhino::build_sass()` to create the `app/static/css/app.min.css` file (**requires [node.js](https://nodejs.org/en/)**)\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    rhino::build_sass()\n    ```\n    :::\n\n    ```bash\n    added 748 packages in 49s\n    build-sass\n    sass --no-source-map --style=compressed \n      ../app/styles/main.scss:../app/static/css/app.min.css\n    ```\n    :::\n    \n    -   This tells me `app.min.css` has been added to in `app/static/css/`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ```bash\n    app/static/\n          └── css\n               └── app.min.css\n    ```\n    :::\n    \n    -   Add the following to `app/js/index.js`:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ```js\n    export function showHelp() {\n    alert('Learn more about shiny frameworks: https://mjfrigaard.github.io/posts/my-rhino-app/');\n    }\n    ```\n    :::\n    \n    -   Run `rhino::build_js()` to build the `app/static/js/app.min.js` (**requires [node.js](https://nodejs.org/en/)**)\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    rhino::build_js()\n    ```\n    :::\n\n    ```bash\n    build-js\n    webpack\n    \n    asset app.min.js 502 bytes [emitted] [minimized] (name: main)\n    runtime modules 670 bytes 3 modules\n    ../app/js/index.js 126 bytes [built] [code generated]\n    webpack 5.69.0 compiled successfully in 1300 ms\n    ```\n    :::\n    \n    -   The output tells me the `app.min.js` has been created in `app/static/js`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ```bash\n    app/static/\n          └── js\n              └── app.min.js\n    ```\n    :::\n    \n    -   Back in `app/main.R`, I add the `onclick` to the `mainPanel()`\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n      mainPanel(\n        fluidRow(\n          column(\n            width = 12,\n            tags$h3(\"myRhinoApp\")\n          )\n        ),\n        fluidRow(\n          column(\n            width = 1,\n            offset = 11,\n            # example info button ---\n            tags$button(\n              id = \"help-button\",\n              icon(\"info\"),\n              # add 'onclick' after rhino::build_sass()\n              # and rhino::build_js()\n              onclick = \"App.showHelp()\"\n            )\n          )\n        ),\n        fluidRow(\n          column(\n            width = 12,\n            # use display module UI ----\n            display$ui(ns(\"disp\"))\n          )\n        )\n      )\n    ```\n    :::\n\n    :::\n    \n-   Now when I save everything and click '**Run App**' in `app.R` I should see the info button (and message): \n\n::: {#fig-js-button .column}\n![](js-button.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nAdding `.js` to `app/js/index.js`\n:::\n\n::: {#fig-js-button-onclick .column}\n![](js-button-onclick.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nAdding `.js` to `app/js/index.js` 'on click'\n:::\n\n\n## Use\n\n-   To run a `rhino` application, use `rhino::app()` in the `app.R` file: \n\n::: {#fig-rhino-app .column}\n![](rhino-app.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`rhino::app()`\n:::\n\n\n-   Most of the development takes place in `app/logic` and `app/view` (using `box` modules). The separation of the 'business logic' workflow from the 'app view' code is similar to the `dev` folder in `golem` and `leprechaun`, but the modules make it easy to move code and functions back and forth between the two folders. \n\n-   The `app/js/index.js` and `app/styles/main.css` are used to include any custom CSS or JavaScript code, but you won't create any new files (other than `index.js` and `main.css`).\n\n    -   New JavaScript or CSS code is placed in `app/js/index.js` or `app/styles/main.css` and then the corresponding `rhino` function is run (`rhino::build_js()` or `rhino::build_sass()`). This **requires installing [node.js](https://nodejs.org/en/)**.\n    \n    -   These functions create output files in `app/static/js/app.min.js` and `app/static/css/app.min.css` that are used in the application.\n\n\n- `tests/` functions like any `testthat` folder (and can be [used with `shinytest2`](https://appsilon.github.io/rhino/articles/how-to/use-shinytest2.html)) and comes with a helper function, [`rhino::test_r()`](https://appsilon.github.io/rhino/reference/test_r.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}