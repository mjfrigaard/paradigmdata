{
  "hash": "22e58058e04babd71111111040345a22",
  "result": {
    "markdown": "---\ntitle: \"Shiny frameworks (part 1, vanilla `shiny`)\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-02-03\"\ncategories: [shiny, code, packages]\nimage: \"image.png\"\nfig-align: center\ncode-link: true\nfontsize: '10'\ntoc: true\ntoc-depth: 4\ntoc-title: 'Contents'\ntoc-location: \"left\"\nfreeze: true\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n\n\n\nThis post is the first in a series demonstrating how to build shiny apps using a variety of frameworks. I will focus on three technical areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app with the framework (from the console and IDE), and any additional packages or dependencies.\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (like CSS or JavaScript), testing, etc. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE), common workflow tips, and anything else to consider while building the application.\n\nThis series was inspired by a [Medium article](https://blog.devgenius.io/which-r-shiny-framework-is-the-best-a-comparison-of-vanilla-shiny-golem-rhino-and-leprechaun-c02ad8e2aa8c) that provided excellent guidance when considering shiny application frameworks. The author compared a 'vanilla shiny' (bare-bones shiny application), [`golem`](https://thinkr-open.github.io/golem/), [`leprechaun`](https://leprechaun.opifex.org/#/), and  [`rhino`](https://appsilon.github.io/rhino/) across a series of dimensions (framework reliability, target type of developer, overall developing experience, etc.). \n\nI'll be covering the three areas mentioned above, and also be comparing a shiny built as an R package (i.e., [`devtools`](https://devtools.r-lib.org/) and [`usethis`](https://usethis.r-lib.org/)). The GitHub repo with all shiny app setups is [here](https://github.com/mjfrigaard/shiny-app-setups).\n\n# A shiny app {#sec-VanillaApp}\n\n> `VanillaApp`: a bare-bones shiny app\n\nA lot of shiny apps being their lives as single `app.R` file, but few stay that way. Nonetheless, it's nice to know you're always only a few lines of R code away from creating a web application.\n\n## Start\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"shiny\")\nlibrary(shiny)\n```\n:::\n\n:::\n\nCreating a new 'vanilla' shiny app from RStudio's **New Project Wizard** gives the following default options:\n\n::: {#fig-vanilla-setup .column}\n![](vanilla-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nNew **shiny** app\n:::\n\n<br>\n\nWhen we create `VanillaApp`, we see a folder with the following files:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nVanillaApp/\n    ├── VanillaApp.Rproj\n    ├── app.R\n    ├── renv\n    └── renv.lock\n    \n2 directories, 3 files\n```\n:::\n\n:::\n\n<br>\n\n## Build\n\n<br>\n\nThe code for the `VanillaApp` app is in `app.R` (*it comes from the RStudio shiny tutorial, [\"Building web applications with Shiny\"](https://rstudio-education.github.io/shiny-course/)*).\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view code in `app.R`*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Define UI ------------\nui <- fluidPage(\n  \n  titlePanel(title = \"movies data app (demo)\"),\n  \n  shiny::sidebarLayout(\n    \n    shiny::sidebarPanel(\n      \n      shiny::selectInput(\n        inputId = \"y\",\n        label = \"Y-axis:\",\n        choices = c(\n          \"IMDB rating\" = \"imdb_rating\",\n          \"IMDB number of votes\" = \"imdb_num_votes\",\n          \"Critics Score\" = \"critics_score\",\n          \"Audience Score\" = \"audience_score\",\n          \"Runtime\" = \"runtime\"\n        ),\n        selected = \"audience_score\"\n      ),\n      \n      shiny::selectInput(\n        inputId = \"x\",\n        label = \"X-axis:\",\n        choices = c(\n          \"IMDB rating\" = \"imdb_rating\",\n          \"IMDB number of votes\" = \"imdb_num_votes\",\n          \"Critics Score\" = \"critics_score\",\n          \"Audience Score\" = \"audience_score\",\n          \"Runtime\" = \"runtime\"\n        ),\n        selected = \"critics_score\"\n      ),\n      \n      shiny::selectInput(\n        inputId = \"z\",\n        label = \"Color by:\",\n        choices = c(\n          \"Title Type\" = \"title_type\",\n          \"Genre\" = \"genre\",\n          \"MPAA Rating\" = \"mpaa_rating\",\n          \"Critics Rating\" = \"critics_rating\",\n          \"Audience Rating\" = \"audience_rating\"\n        ),\n        selected = \"mpaa_rating\"\n      ),\n      \n      shiny::sliderInput(\n        inputId = \"alpha\",\n        label = \"Alpha:\",\n        min = 0, max = 1,\n        value = 0.5\n      ),\n      \n      shiny::sliderInput(\n        inputId = \"size\",\n        label = \"Size:\",\n        min = 0, max = 5,\n        value = 2\n      ),\n      \n      shiny::textInput(\n        inputId = \"plot_title\",\n        label = \"Plot title\",\n        placeholder = \"Enter plot title\"\n      )\n    ),\n    shiny::mainPanel(\n      \n      shiny::tags$br(),\n      \n        shiny::tags$blockquote(\n          shiny::tags$em(\n            shiny::tags$h6(\"The code for this application comes from the \",\n            shiny::tags$a(\"Building web applications with Shiny\", \n              href = \"https://rstudio-education.github.io/shiny-course/\"), \n                          \"tutorial\"))),\n      \n      shiny::plotOutput(outputId = \"scatterplot\")\n    )\n  )\n)\n\n# Define server -------\n\nserver <- function(input, output, session) {\n  output$scatterplot <- shiny::renderPlot({\n    plot <- point_plot(\n      df = movies,\n      x_var = input$x,\n      y_var = input$y,\n      col_var = input$z,\n      alpha_var = input$alpha,\n      size_var = input$size\n    )\n    plot +\n      ggplot2::labs(\n        title = input$plot_title,\n        x = stringr::str_replace_all(tools::toTitleCase(input$x), \"_\", \" \"),\n        y = stringr::str_replace_all(tools::toTitleCase(input$y), \"_\", \" \")\n      )\n  })\n}\n\n# Create App ------------------\n\nshiny::shinyApp(ui = ui, server = server)\n```\n:::\n\n:::\n\nThis is a fairly simple application, but as we can see, it imports data (`movies.RData`) and a requires a helper function stored in `utils.R`.\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view code in `utils.R`*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# pkgs -----\nlibrary(ggplot2)\n\n# point_plot -----\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n  ggplot2::ggplot(\n    data = df,\n    ggplot2::aes(\n      x = .data[[x_var]],\n      y = .data[[y_var]],\n      color = .data[[col_var]]\n    )\n  ) +\n    ggplot2::geom_point(alpha = alpha_var, size = size_var)\n}\n```\n:::\n\n:::\n\nIn my project, I can drop `movies.RData` and `utils.R` and these in the top-level folder.\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nVanillaApp/\n        ├── VanillaApp.Rproj\n        ├── app.R\n        ├── movies.RData\n        ├── renv\n        ├── renv.lock\n        └── utils.R\n\n2 directories, 5 files\n```\n:::\n\n:::\n\n<br>\n\n### `renv/`\n\n\n\n:::: {.callout-note collapse='false'}\n\n## renv\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\n\n![](renv.png){height='20%' width='20%' fig-align='left'}\n  \n*`renv` records the version of R + R packages being used in a project, and provides tools for reinstalling the declared versions of those packages in a project*\n\n::: \n\n::::\n\n\n<br>\n\nThe `renv` folder and `renv.lock` file store the R version and package dependencies for my app. This is evident by the `R-4.2` under `renv/library` and `renv/sandbox` in the folder tree above.\n\nTo keep `renv/` updated, when I install a package with `install.packages()`, I also need to make sure to include a call to `renv::snapshot()`.\n\nSee the example with `shiny`, `ggplot2`, `dplyr` and `tools` below:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# install packages \ninstall.packages(c(\"shiny\", \"ggplot2\", \"dplyr\", \"tools\"))\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nInstalling shiny [1.7.4] ...\n\tOK [linked cache]\n# Installing <package> [version] ..\n#  OK [linked cache]\n# Installing <package> [version] ..\n#  OK [linked cache]\n# Installing <package> [version] ..\n#  OK [linked cache]\nInstalling dplyr [1.1.0] ...\n\tOK [linked cache]\n```\n:::\n\n:::\n\n`renv::snapshot()` records the packages it in `renv.lock` file.\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# save declared versions of packages \nrenv::snapshot()\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n* Lockfile written to '~/projects/VanillaApp/renv.lock'.\n```\n:::\n\n:::\n\n<br>\n\nRead more about [getting started with `renv`](https://rstudio.github.io/renv/articles/renv.html) and [using `renv` in package development](https://rstudio.github.io/renv/articles/packages.html)\n\n\n## Use \n\nTo use `VanillaApp`, we can click on **Run App** in the `app.R` file:\n\n::: {#fig-runapp .column}\n![](runapp.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nRun `VanillaApp`\n:::\n\n<br>\n\n## Recap\n\n`VanillaApp` is now a functioning shiny app, but it's difficult to scale in it's current structure. As the app codebase grows in complexity, the `app.R` (or `ui.R` and `server.R`) might reach thousands of lines of code.\n\nIn the next post, I'll cover developing a shiny app as an R package. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}