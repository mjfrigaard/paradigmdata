{
  "hash": "24d4bf7d804d2933ebde21da90c41225",
  "result": {
    "markdown": "---\ntitle: \"Shiny frameworks (part 3, `golem`)\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-02-17\"\ncategories: [shiny, code, packages]\nimage: \"image.png\"\ntoc: true\ntoc-depth: 4\ntoc-title: 'Contents'\ntoc-location: \"left\"\n\nfig-align: center\ncode-link: true\nfontsize: '10'\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n  \n---\n\n\n\n\n\nThis is the third post in a series on building shiny apps with various frameworks. In this example, I'll be using [`golem`](https://thinkr-open.github.io/golem/) to build a '*production-grade*' shiny app `myGolemApp`.\n\n<!--\nhttps://mjfrigaard.github.io/posts/vanilla-shiny/\n\nhttps://mjfrigaard.github.io/posts/my-pkg-app/\n\nhttps://mjfrigaard.github.io/posts/my-golem-app/\n\nhttps://mjfrigaard.github.io/posts/my-leprechaun-app/\n\nhttps://mjfrigaard.github.io/posts/my-rhino-app/\n-->\n\nI've previously built 1) a 'minimal' shiny app ([`VanillaApp`](https://mjfrigaard.github.io/paradigmdata/pages/posts/vanilla-shiny/vanilla-shiny.html)), and 2) a shiny app built as an R package ([`myPkgApp`](https://mjfrigaard.github.io/paradigmdata/pages/posts/my-pkg-app/my-pkg-app.html)). The GitHub repo with all shiny app setups is [here](https://github.com/mjfrigaard/shiny-app-setups).\n\n## Framework comparisons \n\nThe [original post](https://blog.devgenius.io/which-r-shiny-framework-is-the-best-a-comparison-of-vanilla-shiny-golem-rhino-and-leprechaun-c02ad8e2aa8c) that inspired this series compares 'vanilla shiny' (bare-bones shiny application), [`golem`](https://thinkr-open.github.io/golem/), [`leprechaun`](https://leprechaun.opifex.org/#/), and  [`rhino`](https://appsilon.github.io/rhino/) across a series of dimensions (framework reliability, target type of developer, overall developing experience, etc.). \n\nI'll continue focusing on three technical areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building the shiny app within the framework (from the console and IDE), and any additional packages or dependencies.\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (like CSS or JavaScript), testing, etc. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE), common workflow tips, and anything I found confusing while building the application.\n\n# `myGolemApp`\n\n\n\n:::: {.callout-caution collapse='false'}\n\n## `golem` = package\n\n::: {style='font-size: 0.95em; color: #696969;'}\n\n\n`golem` apps [**are** R packages](https://engineering-shiny.org/golem.html#understanding-golem-app-structure), so many of the the features in `myPkgApp` are available in `myGolemApp` (and lots of extras!).\n  \n\n::: \n\n::::\n\n\nThe completed application is deployed [here](https://mjfrigaard.shinyapps.io/mygolemapp/)\n\n## Start\n\nTo create a new `golem` app from the console, enter the following:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"golem\")\nlibrary(golem)\ngolem::create_golem(path = \"myGolemApp\")\n```\n:::\n\n:::\n\nIf creating a `golem` app from RStudio's **New Project Wizard**, the following defaults are available:\n\n::: {#fig-golem-setup .column}\n![](golem-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nCreating a new `golem` shiny app\n:::\n\nThe initial folder structure for a new `golem` application is below:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nmyGolemApp\n    ├── DESCRIPTION\n    ├── NAMESPACE\n    ├── R\n    │   ├── app_config.R\n    │   ├── app_server.R\n    │   ├── app_ui.R\n    │   └── run_app.R\n    ├── dev\n    │   ├── 01_start.R\n    │   ├── 02_dev.R\n    │   ├── 03_deploy.R\n    │   └── run_dev.R\n    ├── inst\n    │   ├── app\n    │   │   └── www\n    │   │       └── favicon.ico\n    │   └── golem-config.yml\n    ├── man\n    │   └── run_app.Rd\n    ├── myGolemApp.Rproj\n    ├── renv\n    │   ├── activate.R\n    │   ├── sandbox\n    │   │   └── R-4.2\n    │   └── settings.dcf\n    └── renv.lock\n\n12 directories, 17 files\n```\n:::\n\n:::\n\n### `dev/` scripts\n\nThe [`dev/`](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myGolemApp/dev) folder contains `golem`'s 'guided tour' scripts and `dev/run_dev.R`:\n\n-   Below are the scripts to guide you through developing your `golem` app and the `dev/run_dev.R` code.\n\n    -   `dev/01_start.R` opens automatically\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    myGolemApp/dev/\n                ├── 01_start.R\n                ├── 02_dev.R\n                ├── 03_deploy.R\n                └── run_dev.R\n    \n    1 directory, 4 files\n    ```\n    :::\n\n    :::\n    \n    - `dev/run_dev.R` is for running the 'development version' of the application. \n    \nIf you've been following along with the post in this series, you should recognize most of the items in the `dev/` scripts. Even if you are familiar with R package developement, you can think of these scripts as a 'shiny app development checklist.' \n\n### DESCRIPTION\n\nIn the `dev/01_start.R` script, users build a `DESCRIPTION` file with [`golem::fill_desc()`](https://thinkr-open.github.io/golem/reference/fill_desc.html)\n\n-   `fill_desc()` uses [`desc` package](https://r-lib.github.io/desc/), so the sections are entered in a `key = \"value\"` format\n\n    -   Below are the values I've used in `myGolemApp`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    golem::fill_desc(\n      pkg_name = \"myGolemApp\",\n      pkg_title = \"An example goelm app\",\n      pkg_description = \"A working example of the golem package.\",\n      author_first_name = \"Martin\",\n      author_last_name = \"Frigaard\",\n      author_email = \"mjfrigaard@pm.me\",\n      repo_url = NULL # The URL of the GitHub Repo (optional)\n    )\n    ```\n    :::\n\n    :::\n    \n    -   In `dev/02_dev.R`, the `attachment::att_amend_desc()` will \"*Amend `DESCRIPTION` with dependencies read from package code parsing*\". If `attachment` is not installed, use  `install.package('attachment')`\n\n### Package files\n\n-   `dev/01_start.R` also contains the `usethis` functions for for creating common package development files:\n\n    -   LICENSE: `usethis::use_mit_license()`  \n    \n    -   README: `usethis::use_readme_rmd()`   \n    \n    -   Code of Conduct: `usethis::use_code_of_conduct()`\n    \n    -   Lifecycle badge: `usethis::use_lifecycle_badge(\"Experimental\")`\n    \n    -   NEWS.md: `usethis::use_news_md(open = FALSE)`\n    \n    -   Git: `usethis::use_git()`\n\n### `golem` files\n\n-   The `golem` functions in `dev/01_start.R` are for setting the `golem` options and using recommended tests. \n\n    -   Options: `golem::set_golem_options()`\n    \n    -   Tests (with `testthat`): `golem::use_recommended_tests()`\n    \n    -   Favicon: `golem::use_favicon()`\n    \n    -   Helper functions:   [`golem::use_utils_ui()`](https://thinkr-open.github.io/golem/reference/utils_files.html) and [`golem::use_utils_server()`](https://thinkr-open.github.io/golem/reference/utils_files.html) create `golem`'s UI (`R/golem_utils_ui.R`) and server (`R/golem_utils_server.R`) utility functions in the `R/` folder\n\n\n\n:::: {.callout-note collapse='false'}\n\n## `golem` gives away lots of free code!\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\n\n\n_Both `R/golem_utils_ui.R` and `R/golem_utils_server.R` contain a lot of helper functions that come in handy if you're tired of writing out particular function names (like `reactiveValuesToList()` or `column(width = 6)`/`column(width = 12)`)_ \n  \nCheck them out here: \n  \n- [`golem_utils_ui.R`](https://github.com/mjfrigaard/shiny-app-setups/blob/main/myGolemApp/R/golem_utils_ui.R)\n  \n- [`golem_utils_server.R`](https://github.com/mjfrigaard/shiny-app-setups/blob/main/myGolemApp/R/golem_utils_server.R)\n  \n\n\n::: \n\n::::\n\n\n\n### App files\n\nThe `dev/02_dev.R` file covers development, so most of the `golem` functions are for creating files in the `R/` and `inst/` folders:\n\n-   The initial `R/` scripts in a new `golem` app:\n\n    ::: {style=\"font-size: 0.80em;\"}\n    ```bash\n    R/\n    ├── app_config.R\n    ├── app_server.R\n    ├── app_ui.R\n    └── run_app.R\n    \n    1 directory, 4 files\n    ```\n    :::\n    \n    -   `R/app_ui.R` and `R/app_server.R` are `golem`'s version of `ui.R` and `server.R`  \n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/app_ui.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' The application User-Interface\n    #'\n    #' @param request Internal parameter for `{shiny}`.\n    #'     DO NOT REMOVE.\n    #' @import shiny\n    #' @noRd\n    app_ui <- function(request) {\n      tagList(\n        # Leave this function for adding external resources\n        golem_add_external_resources(),\n        # Your application UI logic\n        fluidPage(\n          h1(\"BareBonesGolem\")\n        )\n      )\n    }\n    \n    #' Add external Resources to the Application\n    #'\n    #' This function is internally used to add external\n    #' resources inside the Shiny application.\n    #'\n    #' @import shiny\n    #' @importFrom golem add_resource_path activate_js favicon bundle_resources\n    #' @noRd\n    golem_add_external_resources <- function() {\n      add_resource_path(\n        \"www\",\n        app_sys(\"app/www\")\n      )\n    \n      tags$head(\n        favicon(),\n        bundle_resources(\n          path = app_sys(\"app/www\"),\n          app_title = \"BareBonesGolem\"\n        )\n        # Add here other external resources\n        # for example, you can add shinyalert::useShinyalert()\n      )\n    }\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/app_server.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' The application server-side\n    #'\n    #' @param input,output,session Internal parameters for {shiny}.\n    #'     DO NOT REMOVE.\n    #' @import shiny\n    #' @noRd\n    app_server <- function(input, output, session) {\n      # Your application server logic\n    }\n    ```\n    :::\n\n    :::\n    \n    -   `run_app.R` is an exported function that is available for me to run my app after I've installed the package: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    library(myGolemApp)\n    myGolemApp::run_app()\n    ```\n    :::\n\n    :::\n    \n### Add code files\n    \n-   `golem` has wrappers for creating modules and helper functions in the `R/` folder: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    ## Add modules ----\n    ## Create a module infrastructure in R/\n    golem::add_module(name = \"name_of_module1\", with_test = TRUE) \n    golem::add_module(name = \"name_of_module2\", with_test = TRUE) \n    \n    ## Add helper functions ----\n    ## Creates fct_* and utils_*\n    golem::add_fct(\"helpers\", with_test = TRUE)\n    golem::add_utils(\"helpers\", with_test = TRUE)\n    ```\n    :::\n\n    :::\n    \n    -   `with_test = TRUE` ensures these functions will also create test files in `tests/`\n    \n### Configure\n\n-   The [`R/app_config.R` file](https://github.com/mjfrigaard/shiny-app-setups/blob/main/myGolemApp/R/app_config.R) contains two functions: `app_sys()` (covered above) and `get_golem_config()`, which reads the `inst/golem-config.yml` configuration file\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    default:\n      golem_name: myGolemApp\n      golem_version: 0.0.0.9000\n      app_prod: no\n    production:\n      app_prod: yes\n    dev:\n      golem_wd: !expr here::here()\n    ```\n    :::\n\n    :::\n    \n    -   [`golem-config.yml`](https://engineering-shiny.org/golem.html#manipulating-golem-config.yml) gives access to the app version, name, and (development) working directory, so it can be used to add \"production-only elements\" and is \"shareable across golem projects\"\\\n    \n-   `golem` uses `app_sys()` (a wrapper around `system.file()`) to add external resources to the application\n\n    -   `app_sys()` is included in the `R/app_config.R` file\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # Access files in the current app\n    app_sys <- function(...) {\n      system.file(..., package = \"myGolemApp\")\n    }\n    ```\n    :::\n\n    :::\n    \n-   `get_golem_config()` is also included in the `R/app_config.R` file\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view `get_golem_config()`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    # Read App Config\n    get_golem_config <- function(\n      value,\n      config = Sys.getenv(\n        \"GOLEM_CONFIG_ACTIVE\",\n        Sys.getenv(\n          \"R_CONFIG_ACTIVE\",\n          \"default\"\n        )\n      ),\n      use_parent = TRUE,\n      # Modify this if your config file is somewhere else\n      file = app_sys(\"golem-config.yml\")\n    ) {\n      config::get(\n        value = value,\n        config = config,\n        file = file,\n        use_parent = use_parent\n      )\n    }\n    ```\n    :::\n\n    :::\n\n### Testing\n\nThe `tests/` folder is created in `dev/01_start.R` with [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html), which is a wrapper around `usethis::use_testthat()`\n\n-   `golem::use_recommended_tests()` adds the `spelling` package to our `DESCRIPTION` and updates the `WORDLIST`\n\n-   The tests `golem` creates in the `tests/testthat/` folder can serve as a nice guide for users new to `testthat`\n\n    -   The `tests` folder uses the [`testthat` framework](https://testthat.r-lib.org/)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    tests/testthat/\n                ├── _snaps\n                ├── test-golem-recommended.R\n                ├── test-golem_utils_server.R\n                └── test-golem_utils_ui.R\n    \n    2 directories, 4 files\n    ```\n    :::\n\n    :::\n\n      -   In `dev/02_dev.R` the  [`golem::use_utils_ui()`](https://thinkr-open.github.io/golem/reference/utils_files.html) and [`golem::use_utils_server()`](https://thinkr-open.github.io/golem/reference/utils_files.html) functions also include a `with_test = TRUE` argument, which creates a `tests/` folder (if it doesn't already exist)\n\n### External \n\nThe `inst/` file initially has the following contents/structure:\n\n::: {style=\"font-size: 0.80em;\"}\n```bash\ninst/\n  ├── WORDLIST\n  ├── app/\n  │   └── www/\n  │       └── favicon.ico\n  └── golem-config.yml \n```\n:::\n\nThe `golem-config.yml` file is covered above, but the `inst/app/` folder works just like the `inst/extdata` folder (it is loaded when the package is installed and makes these files available to the application).\n\n-   `dev/02_dev.R` includes golem wrappers for including CSS, JavaScript, and SASS files to the `inst/app/www/` folder:\n\n-   [`golem::add_js_file(\"script\")`](https://thinkr-open.github.io/golem/reference/add_files.html)\n\n-   [`golem::add_js_handler(\"handlers\")`](https://thinkr-open.github.io/golem/reference/add_files.html)\n\n-   [`golem::add_css_file(\"custom\")`](https://thinkr-open.github.io/golem/reference/add_files.html)\n\n-   [`golem::add_sass_file(\"custom\")`](https://thinkr-open.github.io/golem/reference/add_files.html)\n\n    \n### Deploy\n\n-   The final step in the guided tour contains functions for deploying a new application to Posit Connect or Docker (it opens automatically after completing the `dev/02_dev.R`)\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `dev/03_deploy.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    ## Run checks ----\n    ## Check the package before sending to prod\n    devtools::check()\n    rhub::check_for_cran()\n    \n    # Deploy\n    \n    ## Local, CRAN or Package Manager ----\n    ## This will build a tar.gz that can be installed locally,\n    ## sent to CRAN, or to a package manager\n    devtools::build()\n    \n    ## RStudio ----\n    ## If you want to deploy on RStudio related platforms\n    golem::add_rstudioconnect_file()\n    golem::add_shinyappsio_file()\n    golem::add_shinyserver_file()\n    \n    ## Docker ----\n    ## If you want to deploy via a generic Dockerfile\n    golem::add_dockerfile_with_renv()\n    \n    ## If you want to deploy to ShinyProxy\n    golem::add_dockerfile_with_renv_shinyproxy()\n    ```\n    :::\n\n    :::\n\n    -   RStudio (Posit) Connect\n        -   [`golem::add_rstudioconnect_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html), [`golem::add_shinyappsio_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html), and [`golem::add_shinyserver_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html)\n    -   Docker\n        -   [`golem::add_dockerfile_with_renv()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html) and [`golem::add_dockerfile_with_renv_shinyproxy()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html)\n        \n    -   I'll deploy my app using shinyapps.io, so after running `golem::add_shinyappsio_file()` I will see the following output and a new `app.R` file. \n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the output from `golem::add_shinyappsio_file()`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    golem::add_shinyappsio_file()\n    ── Creating _disable_autoload.R ──────────────────────────────────────────────────────\n    ✔ Created\n    ✔ Setting active project to '/Users/mjfrigaard/projects/myGolemApp'\n    ✔ Adding '^app\\\\.R$' to '.Rbuildignore'\n    ✔ Adding '^rsconnect$' to '.Rbuildignore'\n    ✔ Adding 'pkgload' to Imports field in DESCRIPTION\n    • Refer to functions with `pkgload::fun()`\n    ✔ File created at /Users/mjfrigaard/projects/myGolemApp/app.R\n    To deploy, run:\n    • rsconnect::deployApp()\n    \n    • Note that you'll need to upload the whole package to ShinyApps.io\n    ```\n    :::\n\n    :::\n    \n    -   The app.R contents\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the contents of `app.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    # Launch the ShinyApp (Do not remove this comment)\n    # To deploy, run: rsconnect::deployApp()\n    # Or use the blue button on top of this file\n    \n    pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)\n    options( \"golem.app.prod\" = TRUE)\n    myGolemApp::run_app() # add parameters here (if any)\n    ```\n    :::\n\n    :::\n\n\n## Build\n\nBuilding an application with `golem` is very similar to developing an R package. New code files are placed in `R/`, external resources are placed in `inst/`, etc. I'll cover creating modules and utility functions in the next section.\n\n### Writing code\n\nNew modules and utility functions can be created with [`golem::add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) or [`golem::add_utils()`/`golem::add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html)\n\n-   These functions are added to the `R/` folder and include [`@noRd`](https://style.tidyverse.org/documentation.html#internal-functions) by default (which must be removed create the `.Rd` files in the `man/` folder)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # UI module template -------------------\n    #' test UI Function\n    #'\n    #' @description A shiny Module.\n    #'\n    #' @param id,input,output,session Internal parameters for {shiny}.\n    #'\n    #' @noRd\n    #'\n    #' @importFrom shiny NS tagList\n    # server module template ---------------\n    #' test Server Functions\n    #'\n    #' @noRd\n    ```\n    :::\n\n    :::\n\n-   UI module functions end with a `_ui` suffix:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/mod_plot.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    #' plot UI Function\n    #'\n    #' @param id\n    #'\n    #' @return shiny UI module\n    #' @export mod_plot_ui\n    #'\n    #' @importFrom shiny NS tagList tags\n    #' @importFrom shiny plotOutput verbatimTextOutput\n    mod_plot_ui <- function(id) {\n      ns <- shiny::NS(id)\n      shiny::tagList(\n        shiny::tags$br(),\n        shiny::tags$blockquote(\n          shiny::tags$em(\n            shiny::tags$h6(\n              \"The code for this application comes from the \",\n              shiny::tags$a(\"Building web applications with Shiny\",\n                href = \"https://rstudio-education.github.io/shiny-course/\"\n              ),\n              \"tutorial\"\n            )\n          )\n        ),\n        shiny::plotOutput(outputId = ns(\"scatterplot\"))\n      )\n    }\n    ```\n    :::\n\n    :::\n\n-   Server module functions end with a `_server` suffix:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/mod_plot.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' plot Server Functions\n    #'\n    #' @param id module id\n    #' @param var_inputs inputs from mod_var_input\n    #'\n    #' @return shiny server module\n    #' @export mod_plot_server\n    #'\n    #' @importFrom shiny NS moduleServer reactive\n    #' @importFrom tools toTitleCase\n    #' @importFrom shiny renderPlot\n    #' @importFrom stringr str_replace_all\n    #' @importFrom ggplot2 labs theme_minimal theme\n    mod_plot_server <- function(id, var_inputs) {\n      shiny::moduleServer(id, function(input, output, session) {\n        movies <- myGolemApp::movies\n    \n        inputs <- shiny::reactive({\n          plot_title <- tools::toTitleCase(var_inputs$plot_title())\n          list(\n            x = var_inputs$x(),\n            y = var_inputs$y(),\n            z = var_inputs$z(),\n            alpha = var_inputs$alpha(),\n            size = var_inputs$size(),\n            plot_title = plot_title\n          )\n        })\n    \n        output$scatterplot <- shiny::renderPlot({\n          plot <- point_plot(\n            df = movies,\n            x_var = inputs()$x,\n            y_var = inputs()$y,\n            col_var = inputs()$z,\n            alpha_var = inputs()$alpha,\n            size_var = inputs()$size\n          )\n          plot +\n            ggplot2::labs(\n              title = inputs()$plot_title,\n              x = stringr::str_replace_all(tools::toTitleCase(inputs()$x), \"_\", \" \"),\n              y = stringr::str_replace_all(tools::toTitleCase(inputs()$y), \"_\", \" \")\n            ) +\n            ggplot2::theme_minimal() +\n            ggplot2::theme(legend.position = \"bottom\")\n        })\n      })\n    }\n    \n    ## To be copied in the UI\n    # mod_plot_ui(\"plot_1\")\n    \n    ## To be copied in the server\n    # mod_plot_server(\"plot_1\")\n    ```\n    :::\n\n    :::\n\n    -   See all of the modules I use in this application [here on GitHub examples](https://github.com/mjfrigaard/shiny-app-setups/blob/main/myGolemApp/R)\\\n    \n\n\n:::: {.callout-note collapse='false'}\n\n## Module names\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\nIncluding `mod` in the name of module scripts and functions makes it easier to separate them from other functions in my package namespace, if I'm using tab-completion, or if I'm searching for a particular file using `Ctrl` + `.`:\n\n::: {#fig-go-to .column}\n![](go-to-file.png){height='90%' width='90%' fig-align='center'}\n\n**Go to File/Function** in RStudio\n:::\n\n::: \n\n::::\n\n\n-   Include tests for new modules and functions using the `with_test = TRUE` argument\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    tests/testthat/\n                ├── _snaps\n                ├── test-golem-recommended.R\n                ├── test-golem_utils_server.R\n                ├── test-golem_utils_ui.R\n                ├── test-mod_plot.R\n                ├── test-mod_plot_utils_server.R\n                └── test-mod_var_input.R\n    \n    2 directories, 6 files\n    ```\n    :::\n\n    :::\n\n\n\n### Adding resources\n\n-   To include other files (like images), add the image file to `inst/app/www/`, then add the `www/` to the path (see example UI code below)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    shiny::tags$img(src = \"www/shiny.png\")\n    ```\n    :::\n\n    :::\n    \n-   If I wanted to include images in their own folder (like `images/`), I can use `golem::addResourcePath()` to add the name of the sub-folder to `inst/app/`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    golem::add_resource_path(\n              prefix = 'images', \n              directoryPath = system.file('app/images', package = 'myGolemApp'))\n    ```\n    :::\n\n    :::\n    \n-   Now I can add the image file to the `inst/app/www/images/` folder and include the following code in the UI: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    shiny::tags$img(src = \"www/images/golem-hex.png\")\n    ```\n    :::\n\n    :::\n\n-   In `R/app_ui.R`, the `app_ui()` function contains the UI layout functions (`fluidPage()`, `sidebarLayout()`, etc.), and a call to `golem_add_external_resources()`:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the updated `R/app_ui.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' The application User-Interface\n    #'\n    #' @param request Internal parameter for `{shiny}`.\n    #'     DO NOT REMOVE.\n    #' @import shiny\n    #' @noRd\n    app_ui <- function(request) {\n      shiny::tagList(\n        # Leave this function for adding external resources\n        golem_add_external_resources(),\n        # Your application UI logic\n        shiny::fluidPage(\n          shiny::tags$h1(\"myGolemApp\"),\n          shiny::sidebarLayout(\n            shiny::sidebarPanel(\n              mod_var_input_ui(\"vars\")\n            ),\n            shiny::mainPanel(\n              # add shiny hex in www/\n              shiny::tags$img(src = \"www/shiny.png\"),\n              mod_plot_ui(\"plot\"),\n              # add golem hex (in www/images/)\n              shiny::fluidRow(\n                shiny::tags$em(shiny::tags$h4(\n                  \"Brought to you by: \",\n                  shiny::tags$img(src = \"www/images/golem-hex.png\")\n                ))\n              )\n            )\n          )\n        )\n      )\n    }\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view `golem_add_external_resources()`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # this is also included in the app_ui.R script\n    golem_add_external_resources <- function() {\n      add_resource_path(\n        \"www\",\n        app_sys(\"app/www\")\n      )\n      tags$head(\n        favicon(),\n        bundle_resources(\n          path = app_sys(\"app/www\"),\n          app_title = \"myGolemApp\"\n        )\n        # Add here other external resources\n        # for example, you can add shinyalert::useShinyalert()\n      )\n    }\n    ```\n    :::\n\n    :::\n    \n-   Now when I run `devtools::load_all()`, `devtools::document()`, install/restart, and load the package, I see the images properly rendered with the application:\n\n::: {#fig-img-myGolemApp .column}\n![](img-myGolemApp.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nImages in `myGolemApp`\n:::\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## Using the `inst/` folder\n\n::: {style='font-size: 0.95em; color: #38B44A;'}\n\n`golem` takes advantage of the `inst/` folder and R package structure to allow users to provide additional 'assets' to the application. \n\nFor example, if we use `golem`s `app_sys()` function on the local directory (`'.'`), we see all the folders available to the application *at runtime*\n  \n``` r\nfs::dir_tree(path = app_sys('.'))\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/myGolemApp/\n├── DESCRIPTION\n├── INDEX\n├── LICENSE\n├── Meta\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R\n│   ├── myGolemApp\n│   ├── myGolemApp.rdb\n│   └── myGolemApp.rdx\n├── WORDLIST\n├── app\n│   └── www\n│       ├── favicon.ico\n│       ├── images\n│       │   └── golem-hex.png\n│       └── shiny.png\n├── data\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── extdata\n│   └── movies.RData\n├── golem-config.yml\n├── help\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── myGolemApp.rdb\n│   ├── myGolemApp.rdx\n│   └── paths.rds\n└── html\n    ├── 00Index.html\n    └── R.css\n```\n  \n\n\n::: \n\n::::\n\n\n\n## Use\n\nIf you typically build shiny apps in a single `app.R` file (or in `ui.R` and `server.R` files), the `golem` framework might seem overwhelming. I'll give a quick overview of some areas I found confusing when I started using `goelm`:\n\n1. `golem` apps are run using the `myGolemApp::run_app()` function (included in the `R/` folder)\n    \n::: {#fig-myGolemApp .column}\n![](myGolemApp.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nInitial `myGolemApp`\n:::\n\n2. While developing, `golem` also comes with a [`run_dev`](https://github.com/ThinkR-open/golem/blob/HEAD/R/run_dev.R) function that reads the `R/run_dev.R` file and evaluates the code.\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view code in `dev/run_dev.R`*\n:::\n    \n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#' Run run_dev.R\n#'\n#' @param file File path to `run_dev.R`. Defaults to `R/run_dev.R`.\n#' @inheritParams add_module\n#'\n#' @export\n#'\n#' @return Used for side-effect\nrun_dev <- function(\n  file = \"dev/run_dev.R\",\n  pkg = get_golem_wd()\n) {\n\n  # We'll look for the run_dev script in the current dir\n  try_dev <- file.path(\n    pkg,\n    file\n  )\n\n  # Stop if it doesn't exists\n  if (file.exists(try_dev)) {\n    run_dev_lines <- readLines(\n      \"dev/run_dev.R\"\n    )\n  } else {\n    stop(\n      \"Unable to locate dev file\"\n    )\n  }\n\n  eval(\n    parse(\n      text = run_dev_lines\n    )\n  )\n}\n```\n:::\n\n:::\n\n3.    [`dev/`](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myGolemApp/dev/) contains `golem`'s 'guided tour' scripts (`01_start.R`, `02_dev.R`, `03_deploy.R`) and [`run_dev.R`](https://github.com/ThinkR-open/golem/blob/HEAD/R/run_dev.R) (covered above)\n    -   `dev/` is also where to place R scripts that aren't intended to be part of the application package.\n\n4.    [`R/`](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myGolemApp/R): the primary app files for the UI and server are stored in the `R/` folder (`R/app_ui.R`, `R/app_server.R`, `R/run_app.R`), as well as the configuration function (`R/app_config.R`):\n    -   Use the `R/app_config.R` to configure the application to be run on different locations (computers *or* servers).\n    \n5.    [`inst/`](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myGolemApp/inst): the `inst/` folder holds the `golem-config.yml` and location of any external app files.\n\nThe `golem` workflow is similar to building an R package:\n\n-   write functions (modules, helper functions, etc.)   \n\n-   load, document, check, test, install, etc.   \n\n-   then render application (either with `myGolemApp::run_app()` or `golem::run_dev()`)   \n\n6.    Deploying the application can be done with a single function: `rsconnect::deployApp()`, which creates the following output: \n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view the deploy output*\n:::\n    \n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\nPreparing to deploy application...DONE\nUploading bundle for application: 8775458...DONE\nDeploying bundle: 7054081 for application: 8775458 ...\nWaiting for task: 1288644047\n  building: Parsing manifest\n  building: Building image: 8376474\n  building: Installing system dependencies\n  building: Fetching packages\n  building: Building package: covr\n  building: Installing packages\n  building: Installing files\n  building: Pushing image: 8376474\n  deploying: Starting instances\n  unstaging: Stopping old instances\nApplication successfully deployed to https://mjfrigaard.shinyapps.io/mygolemapp/\n```\n:::\n\n:::\n\n\n## Recap\n\nGenerally speaking, `golem`'s start-up scripts save time and serves as a gentle introduction to some of the functions used in R package development. The `golem::add_` functions are an area where (I think) `golem` really separates itself from standard R packages. Having dedicated shiny development functions (and the `app/inst/www` folder) reduces the cognitive overhead of mapping the standard R package development functions (i.e., those from `usethis` and `devtools`) into shiny-specific development.\n\n::: {#fig-golem .column}\n![](myGolemApp-compare.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`myGolemApp`\n:::\n\n`golem` is a popular framework for a reason--it's designed to allow developers to build a shiny application and R package simultaneously. Added bonuses include taking advantage of RStudio's build tools, great [documentation](https://engineering-shiny.org/index.html), and [user-guides.](https://thinkr-open.github.io/golem/index.html).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}