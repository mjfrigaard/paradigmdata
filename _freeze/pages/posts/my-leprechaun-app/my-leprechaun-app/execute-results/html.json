{
  "hash": "b90da5677dab1471d83352e83346be75",
  "result": {
    "markdown": "---\ntitle: \"Shiny frameworks (part 4, `leprechaun`)\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-02-21\"\ncategories: [shiny, code, packages]\nimage: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n\nfig-align: center\ncode-link: true\nfontsize: '10'\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n\n\n\n\n\nThis is the fourth post in a series on shiny app frameworks. In this post, I'll build a '*leaner and smaller*' shiny app using the [`leprechaun`](https://leprechaun.opifex.org/#/) package and framework.\n\n<!--\nhttps://mjfrigaard.github.io/posts/vanilla-shiny/\n\nhttps://mjfrigaard.github.io/posts/my-pkg-app/\n\nhttps://mjfrigaard.github.io/posts/my-golem-app/\n\nhttps://mjfrigaard.github.io/posts/my-leprechaun-app/\n\nhttps://mjfrigaard.github.io/posts/my-rhino-app/\n-->\n\n## Framework comparisons \n\nThe [original post](https://blog.devgenius.io/which-r-shiny-framework-is-the-best-a-comparison-of-vanilla-shiny-golem-rhino-and-leprechaun-c02ad8e2aa8c) that inspired this series compares 'vanilla shiny' (bare-bones shiny application), [`golem`](https://thinkr-open.github.io/golem/), [`leprechaun`](https://leprechaun.opifex.org/#/), and  [`rhino`](https://appsilon.github.io/rhino/) across a series of dimensions (framework reliability, target type of developer, overall developing experience, etc.). \n\nThis series focuses on thee technical areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app with the framework (from the console and IDE), and any additional packages or dependencies.\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (like CSS or JavaScript), testing, etc. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE), common workflow tips, and any aspects of the framework I found confusing while building the application.\n  \n+ In part 1, I built a 'minimal' shiny app ([`VanillaApp`](https://mjfrigaard.github.io/posts/vanilla-shiny/))  \n\n+ In part 2, I structured the shiny application as an R package using [`usethis`](https://usethis.r-lib.org/) and [`devtools`](https://devtools.r-lib.org/), ([`myPkgApp`](https://mjfrigaard.github.io/posts/my-pkg-app/)).\n\n+ In post number three, I used the popular [`golem` framework](https://thinkr-open.github.io/golem/) ([`myGolemApp`](https://mjfrigaard.github.io/posts/my-golem-app/))\n\n\nThe GitHub repo with all shiny app setups is [here](https://github.com/mjfrigaard/shiny-app-setups).\n  \n\n\n# `myLeprechaunApp`\n\n\n\n`leprechaun` apps are built using the same methods as R packages (`devtools` and `usethis`), but are intended to be a 'leaner and smaller' version of `golem`.\n\n\n\n\n\n:::: {.callout-note collapse='false'}\n\n## **What does _'leaner and smaller'_ mean?**\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\n`leprechaun` doesn't add itself as a dependency (i.e., no need to add `leprechaun` to the list of `Imports` in the `DESCRIPTION` or `NAMESPACE`). ['the golem in the room'](https://leprechaun.opifex.org/#/#the-golem-in-the-room) on the package website is worth reading because it covers the differences between the two packages (and why you might choose one over the other).\n\n::: \n\n::::\n\n\n## Start\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::create_package(\"myLeprechaunApp\")\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n*Click __Code__ to see output*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\n✔ Creating '../projects/myLeprechaunApp/'\n✔ Setting active project to '/Users/mjfrigaard/projects/myLeprechaunApp'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\nPackage: myLeprechaunApp\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to\n    pick a license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n✔ Writing 'NAMESPACE'\n✔ Writing 'myLeprechaunApp.Rproj'\n✔ Adding '^myLeprechaunApp\\\\.Rproj$' to '.Rbuildignore'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n✔ Opening '/Users/mjfrigaard/projects/myLeprechaunApp/' in new RStudio session\n✔ Setting active project to '<no active project>'\n```\n:::\n\n:::\n\nWhen creating a new `leprechaun` package in the IDE, it's identical to the R package setup.\n\n::: {#fig-leprechaun-setup .column}\n![](leprechaun-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`myLeprechaunApp`\n:::\n\nAfter the new project opens, install and load the `leprechaun` package, then run `leprechaun::scaffold()`:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"leprechaun\")\nlibrary(leprechaun)\nleprechaun::scaffold()\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n*Click __Code__ to see output*\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\n── Scaffolding leprechaun app ─────────────────────────────────────────\n\n── Creating lock file ──\n\n✔ Creating .leprechaun\n\n── Adding dependencies ──\n\n✔ Adding 'shiny' to Imports in DESCRIPTION\n✔ Adding 'bslib' to Imports in DESCRIPTION\n✔ Adding 'htmltools' to Imports in DESCRIPTION\n✔ Adding 'pkgload' to Suggests in DESCRIPTION\n\n\n── Generating code ──\n\n✔ Creating R/ui.R\n✔ Creating R/assets.R\n✔ Creating R/run.R\n✔ Creating R/server.R\n✔ Creating R/leprechaun-utils.R\n✔ Creating R/_disable_autoload.R\n✔ Creating R/zzz.R\n✔ Creating R/input-handlers.R\n\n✔ Creating inst/dev\n✔ Creating inst/assets\n✔ Creating inst/img\n✔ Creating inst/run/app.R\n\n── Ignoring files ──\n\n✔ Adding '^\\\\.leprechaun$' to '.Rbuildignore'\n```\n:::\n\n:::\n\nThis results in the following folder tree:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nmyLeprechaunApp/\n        ├── DESCRIPTION\n        ├── NAMESPACE\n        ├── R/\n        │   ├── _disable_autoload.R\n        │   ├── assets.R\n        │   ├── input-handlers.R\n        │   ├── leprechaun-utils.R\n        │   ├── run.R\n        │   ├── server.R\n        │   ├── ui.R\n        │   └── zzz.R\n        ├── inst/\n        │   ├── assets/\n        │   ├── dev/\n        │   ├── img/\n        │   └── run/\n        │       └── app.R\n        └── myLeprechaunApp.Rproj\n\n7 directories, 12 files\n```\n:::\n\n:::\n\nThis structure should look familiar if you've been following along with this series. The standard R package files and folders (`DESCRIPTION`, `NAMESPACE`, `R/`, and `myLeprechaunApp.Rproj`) are accompanied by multiple sub-folders in `inst/` (recall that `inst/` contents are available in the package when the package is installed).\n\n### Setup\n\nIn this section I'll cover the initial files in the new `leprechaun` application. \n\n#### `R/`\n\n-   The `R/` folder contents are below: \n\n    -   Some of these files should look familiar (`R/ui.R`, `R/server.R`, and `R/run.R`)\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n            └── R/\n                ├── _disable_autoload.R\n                ├── assets.R\n                ├── input-handlers.R\n                ├── leprechaun-utils.R\n                ├── run.R\n                ├── server.R\n                ├── ui.R\n                └── zzz.R\n    ```\n    :::\n\n    :::\n\n\n-   The initial application files are created using [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold), which takes the following options as function arguments:\n\n    -   `ui` controls the application layout (can be `\"fluidPage\"` or `\"navbarPage\"`, defaults to `\"navbarPage\"`)\n    -   `bs_version` Bootstrap version (\"*If shiny \\> 1.6 is installed defaults to version 5, otherwise version 4\"* )\n    -   `overwrite`: Overwrite all files?\\\n\n-   `assets.R`: contains the `serveAssets()` function, which will identify the modules using CSS or JavaScript and create `dependencies`, a list of metadata on the app. If you run the function after initially building your `leprechaun` app, you'll see the following:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/assets.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' Dependencies\n    #'\n    #' @param modules JavaScript files names that require\n    #' the `type = module`.\n    #' @importFrom htmltools htmlDependency\n    #'\n    #' @keywords internal\n    serveAssets <- function(modules = NULL) {\n      # JavaScript files\n      javascript <- list.files(\n        system.file(package = \"myLeprechaunApp\"),\n        recursive = TRUE,\n        pattern = \".js$\"\n      )\n    \n      modules <- get_modules(javascript, modules)\n      javascript <- remove_modules(javascript, modules)\n    \n      # CSS files\n      css <- list.files(\n        system.file(package = \"myLeprechaunApp\"),\n        recursive = TRUE,\n        pattern = \".css$\"\n      )\n    \n      # so dependency processes correctly\n      names(css) <- rep(\"file\", length(css))\n      names(javascript) <- rep(\"file\", length(javascript))\n    \n      # serve dependencies\n      dependencies <- list()\n    \n      standard <- htmlDependency(\n        \"myLeprechaunApp\",\n        version = utils::packageVersion(\"myLeprechaunApp\"),\n        package = \"myLeprechaunApp\",\n        src = \".\",\n        script = javascript,\n        stylesheet = css\n      )\n      dependencies <- append(dependencies, list(standard))\n    \n      if (!is.null(modules)) {\n        modules <- htmlDependency(\n          \"myLeprechaunApp-modules\",\n          version = utils::packageVersion(\"myLeprechaunApp\"),\n          package = \"myLeprechaunApp\",\n          src = \".\",\n          script = modules,\n          meta = list(type = \"module\")\n        )\n        dependencies <- append(dependencies, list(modules))\n      }\n    \n      return(dependencies)\n    }\n    \n    #' Module\n    #'\n    #' Retrieve and add modules from a vector of files.\n    #'\n    #' @param files JavaScript files\n    #' @param modules JavaScript files names that require\n    #' the `type = module`.\n    #' @importFrom htmltools htmlDependency\n    #'\n    #' @keywords internal\n    #' @name js-modules\n    remove_modules <- function(files, modules) {\n      if (is.null(modules)) {\n        return(files)\n      }\n    \n      # make pattern\n      pattern <- collapse_files(modules)\n    \n      # remove modules\n      files[!grepl(pattern, files)]\n    }\n    \n    #' @rdname js-modules\n    #' @keywords internal\n    get_modules <- function(files, modules) {\n      if (is.null(modules)) {\n        return(NULL)\n      }\n    \n      # make pattern\n      pattern <- collapse_files(modules)\n    \n      # remove modules\n      files[grepl(pattern, files)]\n    }\n    \n    # collapse files into a pattern\n    collapse_files <- function(files) {\n      pattern <- paste0(files, collapse = \"$|\")\n      paste0(pattern, \"$\")\n    }\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    serveAssets()\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the initial output from `serveAssets()`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"show\"}\n    [[1]]\n    List of 10\n     $ name      : chr \"myLeprechaunApp\"\n     $ version   : chr \"0.0.0.9000\"\n     $ src       :List of 1\n      ..$ file: chr \".\"\n     $ meta      : NULL\n     $ script    : Named chr(0) \n      ..- attr(*, \"names\")= chr(0) \n     $ stylesheet: Named chr(0) \n      ..- attr(*, \"names\")= chr(0) \n     $ head      : NULL\n     $ attachment: NULL\n     $ package   : chr \"myLeprechaunApp\"\n     $ all_files : logi TRUE\n     - attr(*, \"class\")= chr \"html_dependency\"\n    ```\n    :::\n\n    :::\n\n-   `_disable_autoload.R` is a way to disable the `shiny::loadSupport()` function. By default, shiny will load *any top-level supporting `.R` files in the `R/` directory adjacent to the `app.R`/`server.R`/`ui.R` files.*\n\n-   `input-handlers.R`: \n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/input-handlers.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Input Dataframe\n    #' \n    #' Converts the input received from the WebSocket\n    #' to a data.frame.\n    #' \n    #' @param data Input data received from WebSocket.\n    #' \n    #' @keywords internal\n    leprechaun_handler_df <- function(data){\n    \tdo.call(\"rbind\", lapply(data))\n    }\n    \n    #' Input List\n    #' \n    #' Forces the input received from the WebSocket \n    #' to a list. This should really not be needed as\n    #' it is handled like so by default.\n    #' \n    #' @param data Input data received from WebSocket.\n    #' \n    #' @keywords internal\n    leprechaun_handler_list <- function(data){\n    \treturn(data)\n    }\n    \n    .onAttach <- function(...) {\n    \tshiny::registerInputHandler(\n    \t\t\"myLeprechaunApp.list\", \n    \t\tleprechaun_handler_list, \n    \t\tforce = TRUE\n    \t)\n    \n    \tshiny::registerInputHandler(\n    \t\t\"myLeprechaunApp.df\", \n    \t\tleprechaun_handler_df, \n    \t\tforce = TRUE\n    \t)\n    }\n    ```\n    :::\n\n    :::\n\n\n-   `leprechaun-utils.R` initially contains the `make_send_message()` function (which is used in the `R/server.R` below).  \n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/leprechaun-utils.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Create a Helper to Send Messages\n    #'\n    #' Create a function to send custom messages to the front-end,\n    #' this function makes it such that the namespace is carried\n    #' along.\n    #' The namespace is appended as `ns`.\n    #' The namespace with the optional hyphen is\n    #' included as `ns2`.\n    #'\n    #' @param session Shiny session to derive namespace\n    #' @param prefix A prefix to add to all types.\n    #' Note that the prefix is followed by a hyphen `-`.\n    #'\n    #' @examples\n    #' \\dontrun{\n    #' send_message <- make_send_message(session)\n    #' send_message(\"do-sth\")\n    #' send_message(\"do-sth-else\", x = 1)\n    #'\n    #' # with prefix\n    #' send_message <- make_send_message(session, prefix = \"PREFIX\")\n    #'\n    #' # this sends a message of type:\n    #' # PREFIX-so-th\n    #' send_message(\"do-sth\")\n    #' }\n    #'\n    #' @noRd\n    #' @keywords internal\n    make_send_message <- function(session, prefix = NULL) {\n      ns <- session$ns(NULL)\n    \n      ns2 <- ns\n      if (length(ns) > 0 && ns != \"\") {\n        ns2 <- paste0(ns2, \"-\")\n      }\n    \n      function(msgId, ...) {\n        if (!is.null(prefix)) {\n          msgId <- sprintf(\"%s-%s\", prefix, msgId)\n        }\n    \n        session$sendCustomMessage(\n          msgId,\n          list(\n            ns = ns,\n            ns2 = ns2,\n            ...\n          )\n        )\n      }\n    }\n    ```\n    :::\n\n    :::\n\n-   `run.R` contains functions for running the production (`run()`) and development version of the application (`run_dev()`): \n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/run.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Run\n    #' \n    #' Run application\n    #' \n    #' @param ... Additional parameters to pass to [shiny::shinyApp].\n    #' \n    #' @importFrom shiny shinyApp\n    #' \n    #' @export \n    run <- function(...){\n    \tshinyApp(\n    \t\tui = ui,\n    \t\tserver = server,\n    \t\t...\n    \t)\n    }\n    \n    #' Run Development\n    #' \n    #' Runs the development version which includes\n    #' the build step.\n    #' \n    #' @keywords internal\n    run_dev <- function(){\n    \tfile <- system.file(\"run/app.R\", package = \"myLeprechaunApp\")\n    \tshiny::shinyAppFile(file)\n    }\n    ```\n    :::\n\n    :::\n\n-   `server.R` by default creates `send_message` with `make_send_message(session)` (see `R/leprechaun-utils.R` above).\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/server.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Server\n    #' \n    #' Core server function.\n    #' \n    #' @param input,output Input and output list objects\n    #' containing said registered inputs and outputs.\n    #' @param session Shiny session.\n    #' \n    #' @noRd \n    #' @keywords internal\n    server <- function(input, output, session){\n    \tsend_message <- make_send_message(session)\t\n    }\n    ```\n    :::\n\n    :::\n\n\n-   `ui.R` holds the `ui()` and `assets()` functions. `assets()` loads the resources called in the `R/assets.R` file (see `serveAssets()` function above).\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `ui()`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Shiny UI\n    #' \n    #' Core UI of package.\n    #' \n    #' @param req The request object.\n    #' \n    #' @import shiny\n    #' @importFrom bslib bs_theme\n    #' \n    #' @keywords internal\n    ui <- function(req) {\n    \tfluidPage(\n    \t\ttheme = bs_theme(version = 5),\n    \t\tassets(),\n    \t\th1(\"myLeprechaunApp\")\n    \t)\n    }\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `assets()`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Assets\n    #' \n    #' Includes all assets.\n    #' This is a convenience function that wraps\n    #' [serveAssets] and allows easily adding additional\n    #' remote dependencies (e.g.: CDN) should there be any.\n    #' \n    #' @importFrom shiny tags\n    #' \n    #' @keywords internal\n    assets <- function() {\n    \tlist(\n    \t\tserveAssets(), # base assets (assets.R)\n    \t\ttags$head(\n    \t\t\t# Place any additional depdendencies here\n    \t\t\t# e.g.: CDN\n    \t\t)\t\n    \t)\n    }\n    ```\n    :::\n\n    :::\n\n\n-   `zzz.R` contains [`shiny`'s `addResourcePath()` function](https://shiny.rstudio.com/reference/shiny/1.0.1/addresourcepath) for adding images to the application (in `inst/img/`)\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/zzz.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    .onLoad <- function(...){\n    \tshiny::addResourcePath(\n    \t\t\"img\",\n    \t\tsystem.file(\"img\", package = \"myLeprechaunApp\")\n    \t)\n    }\n    ```\n    :::\n\n    :::\n\n\n\n#### `inst/run/app.R`\n\n\n\n-   `app.R` contains a file that *looks* like it would be used to run the application, but it's not. This file contains a call to `leprechaun::build()`, then `pkgload::load_all()`. \n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `inst/run/app.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # do not deploy from this file\n    # see leprechaun::add_app_file()\n    leprechaun::build()\n    \n    pkgload::load_all(\n    \tpath = \"../../\",\n    \treset = TRUE,\n    \thelpers = FALSE\n    )\n    \n    run()\n    ```\n    :::\n\n    :::\n    \n    - This file is not run directly (check `leprechaun::add_app_file()`):\n\n## Build\n\nBuilding `leprechaun` apps is similar to `golem`/R packages. New code is placed in the R/ folder, and application resources (CSS, SASS, JavaScript files) are added using one of the `leprechaun::use_*` functions: \n\n  -   [`use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) \n  -   [`use_html_utils()`](https://leprechaun.opifex.org/#/reference/use_html_utils)  \n  -   [`use_endpoints_utils()`](https://leprechaun.opifex.org/#/reference/use_endpoints_utils)\n  -   [`use_js_utils()`](https://leprechaun.opifex.org/#/reference/use_js_utils)\n  \nMore assets can be added using the [`leprechaun::use_packer()`](https://leprechaun.opifex.org/#/examples/basic#javascript) function. \n\n### Develop\n\n\nThe [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) defaults to a `navbarPage()`, but I'll switch to a `fluidPage()` for this example. \n\nAfter `devtools::load_all()` and `devtools::document()`, restarting and loading the package, I can run the application with `run()`.\n\n::: {#fig-initial-leprechaun .column}\n![](initial-leprechaun.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nInitial `run()`\n:::\n\n\n\n#### `add_module()`\n\n\n\nCreating modules is simple with [`leprechaun::add_module()`](https://leprechaun.opifex.org/#/reference/add_module). \n\n-   The initial UI module:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    leprechaun::add_module(\"var_input\")\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    ✔ Creating R/module_var_input.R\n    ```\n    :::\n\n    :::\n\n    -   Similar to `golem`, this creates functions for the UI and server portions of the module.\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    #' var_input UI\n    #' \n    #' @param id Unique id for module instance.\n    #' \n    #' @keywords internal\n    var_inputUI <- function(id){\n    \tns <- NS(id)\n    \n    \ttagList(\n    \t\th2(\"var_input\"),\n    \n    \t)\n    }\n    ```\n    :::\n\n    :::\n\n    -   The initial server module:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    #' var_input Server\n    #' \n    #' @param id Unique id for module instance.\n    #' \n    #' @keywords internal\n    var_input_server <- function(id){\n    \tmoduleServer(\n    \t\tid,\n    \t\tfunction(\n    \t\t\tinput, \n    \t\t\toutput, \n    \t\t\tsession\n    \t\t\t){\n    \t\t\t\t\n    \t\t\t\tns <- session$ns\n    \t\t\t\tsend_message <- make_send_message(session)\n    \n    \t\t\t\t# your code here\n    \t\t}\n    \t)\n    }\n    \n    # UI\n    # var_inputUI('id')\n    \n    # server\n    # var_input_server('id')\n    ```\n    :::\n\n    :::\n    \n    -   Note the `send_message <- make_send_message(session)` in `var_input_server()`. I will show how this is used in the JavaScript section below.\n    \n\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## Tip: `@keywords internal`\n\n::: {style='font-size: 0.95em; color: #38B44A;'}\n\n\nThe module contents are similar to `golem`, but instead of using the `@noRd` tag, these functions include `@keywords internal` (which can be used to [document your package](https://roxygen2.r-lib.org/articles/rd-other.html?q=@keywords#packages)).\n\n-   In order to this, run `usethis::use_package_doc()` and a script will be created in `R/` with the following contents:\n  \n<pre>\n'_PACKAGE'\n\n## usethis namespace: start\n## usethis namespace: end\nNULL\n</pre>\n\n::: \n\n::::\n\n\nThe code for the `var_input` and `plot_display` modules are below. \n\n-   The `R/module_var_input.R` file:\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/module_var_input.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' var_input UI\n    #'\n    #' @param id Unique id for module instance.\n    #'\n    #' @keywords internal\n    #'\n    #' @return shiny UI module\n    #' @export var_inputUI\n    #'\n    #' @description A shiny Module.\n    #'\n    #' @importFrom shiny NS tagList selectInput\n    #' @importFrom shiny sliderInput textInput\n    var_inputUI <- function(id){\n    \tns <- shiny::NS(id)\n    \tshiny::tagList(\n        shiny::selectInput(\n          inputId = ns(\"y\"),\n          label = \"Y-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"audience_score\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"x\"),\n          label = \"X-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"imdb_rating\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"z\"),\n          label = \"Color by:\",\n          choices = c(\n            \"Title Type\" = \"title_type\",\n            \"Genre\" = \"genre\",\n            \"MPAA Rating\" = \"mpaa_rating\",\n            \"Critics Rating\" = \"critics_rating\",\n            \"Audience Rating\" = \"audience_rating\"\n          ),\n          selected = \"mpaa_rating\"\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"alpha\"),\n          label = \"Alpha:\",\n          min = 0, max = 1, step = 0.1,\n          value = 0.5\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"size\"),\n          label = \"Size:\",\n          min = 0, max = 5,\n          value = 2\n        ),\n        shiny::textInput(\n          inputId = ns(\"plot_title\"),\n          label = \"Plot title\",\n          placeholder = \"Enter plot title\"\n        )\n    \t)\n    }\n    \n    #' var_input Server\n    #'\n    #' @param id Unique id for module instance.\n    #'\n    #' @keywords internal\n    #'\n    #' @return shiny server module\n    #' @export var_input_server\n    #'\n    #' @importFrom shiny NS moduleServer reactive\n    var_input_server <- function(id){\n    \tmoduleServer(\n    \t\tid,\n    \t\tfunction(\n    \t\t\tinput,\n    \t\t\toutput,\n    \t\t\tsession\n    \t\t\t){\n    \n    \t\t\t\tns <- session$ns\n    \t\t\t\tsend_message <- make_send_message(session)\n    \n    \t\t\t\t# your code here\n        return(\n          list(\n            \"x\" = shiny::reactive({\n              input$x\n            }),\n            \"y\" = shiny::reactive({\n              input$y\n            }),\n            \"z\" = shiny::reactive({\n              input$z\n            }),\n            \"alpha\" = shiny::reactive({\n              input$alpha\n            }),\n            \"size\" = shiny::reactive({\n              input$size\n            }),\n            \"plot_title\" = shiny::reactive({\n              input$plot_title\n            })\n            )\n          )\n    \t\t}\n    \t)\n    }\n    \n    # UI\n    # var_inputUI('id')\n    \n    # server\n    # var_input_server('id')\n    ```\n    :::\n\n    :::\n\n-   The `R/module_plot_display.R` file:\n\n    -   My `plot_dispay` module collects the data from var_input and creates the plot with the custom `point_plot()` function: \n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/module_plot_display.R`*\n    :::\n    \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' plot_display UI\n    #'\n    #' @param id Unique id for module instance.\n    #'\n    #' @return shiny UI module\n    #' @export plot_displayUI\n    #'\n    #' @description A shiny Module.\n    #'\n    #' @importFrom shiny NS tagList tags\n    #' @importFrom shiny plotOutput\n    plot_displayUI <- function(id){\n    \tns <- shiny::NS(id)\n    \tshiny::tagList(\n        shiny::tags$br(),\n        shiny::tags$blockquote(\n          shiny::tags$em(\n            shiny::tags$h6(\n              \"The code for this application comes from the \",\n              shiny::tags$a(\"Building web applications with Shiny\",\n                href = \"https://rstudio-education.github.io/shiny-course/\"\n              ),\n              \"tutorial\"\n            )\n          )\n        ),\n        shiny::plotOutput(outputId = ns(\"scatterplot\"))\n    \t)\n    }\n    \n    #' plot_display Server\n    #'\n    #' @param id Unique id for module instance.\n    #'\n    #' @keywords internal\n    plot_display_server <- function(id, var_input){\n    \tmoduleServer(\n    \t\tid,\n    \t\tfunction(\n    \t\t\tinput,\n    \t\t\toutput,\n    \t\t\tsession\n    \t\t\t){\n    \n    \t\t\t\tns <- session$ns\n    \t\t\t\tsend_message <- make_send_message(session)\n    \n    \t\t\t\t# your code here\n        movies <- myLeprechaunApp::movies\n    \n        inputs <- shiny::reactive({\n          plot_title <- tools::toTitleCase(var_inputs$plot_title())\n          list(\n            x = var_inputs$x(),\n            y = var_inputs$y(),\n            z = var_inputs$z(),\n            alpha = var_inputs$alpha(),\n            size = var_inputs$size(),\n            plot_title = plot_title\n          )\n        })\n    \n        output$scatterplot <- shiny::renderPlot({\n          plot <- point_plot(\n            df = movies,\n            x_var = inputs()$x,\n            y_var = inputs()$y,\n            col_var = inputs()$z,\n            alpha_var = inputs()$alpha,\n            size_var = inputs()$size\n          )\n          plot +\n            ggplot2::labs(\n              title = inputs()$plot_title,\n                x = stringr::str_replace_all(\n                      tools::toTitleCase(\n                          inputs()$x),\n                        \"_\",\n                      \" \"),\n                y = stringr::str_replace_all(\n                      tools::toTitleCase(\n                          inputs()$y),\n                      \"_\",\n                    \" \")) +\n            ggplot2::theme_minimal() +\n            ggplot2::theme(legend.position = \"bottom\")\n        })\n    \t\t}\n    \t)\n    }\n    \n    # UI\n    # plot_displayUI('id')\n    \n    # server\n    # plot_display_server('id')\n    ```\n    :::\n\n    :::\n\nAfter creating the modules, adding them to the UI (`R/ui.R`) and server (`R/server.R`) is straightforward.\n\n-   The `R/ui.R` file:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Shiny UI\n    #'\n    #' Core UI of package.\n    #'\n    #' @param req The request object.\n    #'\n    #' @import shiny\n    #' @importFrom bslib bs_theme\n    #'\n    #' @keywords internal\n    ui <- function(req) {\n      fluidPage(\n        theme = bs_theme(version = 5),\n        assets(),\n        h1(\"myLeprechaunApp\"),\n        # Begin new code -->\n        shiny::sidebarLayout(\n          shiny::sidebarPanel(\n            var_inputUI(\"vars\")\n          ),\n          shiny::mainPanel(\n            plot_displayUI(\"plot\")\n          )\n        )\n        ## End new code <--\n      )\n    }\n    ```\n    :::\n\n    :::\n\n-   The `R/server.R` file:\n\n    -   The server also has the `make_send_message()` function in it by default (more on that below).\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/server.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Server\n    #'\n    #' Core server function.\n    #'\n    #' @param input,output Input and output list objects\n    #' containing said registered inputs and outputs.\n    #' @param session Shiny session.\n    #'\n    #' @noRd\n    #' @keywords internal\n    server <- function(input, output, session){\n    \n    \tsend_message <- make_send_message(session)\n    \n      ## New code -->\n       selected_vars <- var_input_server(\"vars\")\n    \n       plot_display_server(\"plot\", var_inputs = selected_vars)\n       ## New code <--\n    \n    }\n    ```\n    :::\n\n    :::\n\n\n\nThe other components of `myLeprechaunApp` were created using the standard `usethis` package development functions.\n\n#### `use_data_raw()`\n\n\n\n-   the `movies` data was added to `inst/extdata` and loaded into the package with `usethis::use_data_raw()`\n\n\n\n:::: {.callout-note collapse='false'}\n\n## Adding data to a package\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\nAfter calling `usethis::use_data_raw('movies')`, I can use `system.file()` to locate the file with the following code in `data-raw/movies.R`:\n  \n``` r\n## code to prepare `movies` dataset goes here\npth <- system.file('extdata/movies.RData', package = 'myLeprechaunApp')\nload(pth)\nusethis::use_data(movies, overwrite = TRUE)\n```\n\n::: \n\n::::\n\n\n\n\n#### `use_r()`\n\n\n\n-   `usethis::use_r()` created `R/utils_plot_display.R` to hold the `point_plot()` function  \n  \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/utils_plot_display.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' Plot points (shiny)\n    #'\n    #' @param df input dataset (tibble or data.frame)\n    #' @param x_var x variable\n    #' @param y_var y variable\n    #' @param col_var color variable\n    #' @param alpha_var alpha value\n    #' @param size_var size value\n    #'\n    #' @return plot object\n    #' @export point_plot\n    #'\n    #' @importFrom ggplot2 ggplot aes geom_point\n    #'\n    #' @examples\n    #' \\donttest{\n    #' load(\n    #'   list.files(\n    #'     system.file(\"extdata\", package = \"myLeprechaunApp\"),\n    #'    pattern = \"movies\",\n    #'    full.names = TRUE)\n    #'    )\n    #' point_plot(df = movies,\n    #'   x_var = \"critics_score\",\n    #'   y_var = \"imdb_rating\",\n    #'   col_var = \"critics_rating\",\n    #'   alpha_var = 1/3,\n    #'   size_var = 2)\n    #' }\n    point_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n        ggplot2::ggplot(data = df,\n          ggplot2::aes(x = .data[[x_var]],\n              y = .data[[y_var]],\n              color = .data[[col_var]])) +\n          ggplot2::geom_point(alpha = alpha_var, size = size_var)\n    \n    }\n    ```\n    :::\n\n    :::\n\nNow I can run `devtools::load_all()`, `devtools::document()`, restart and load the package, then `run()`\n\n::: {#fig-full-run .column}\n![](myLeprechaun-run.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nrun `myLeprechaunApp`\n:::\n\n\n\n#### `inst/`\n\n\n\n`leprechaun` uses the `inst/` folder similar to the `golem` framework, but instead of only loading the files in `inst/app/www`, `leprechaun` apps include four sub-folders that are ready at application runtime.  \n\n\n\n##### `packer` \n\n\n\nTo demonstrate how the `make_send_message()` function works, I'll walk through the [JavaScript example from the package website](https://leprechaun.opifex.org/#/examples/basic#javascript). \n\n-   Run `packer::scaffold_leprechaun()`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    packer::scaffold_leprechaun()\n    ```\n    :::\n\n    :::\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the output from `packer::scaffold_leprechaun()`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ── Scaffolding leprechaun ──────────────────────────────────────────────\n    ✔ Initialiased npm\n    ✔ webpack, webpack-cli, webpack-merge installed with scope \"dev\" \n    ✔ Added npm scripts\n    ✔ Created srcjs directory\n    ✔ Created srcjs/config directory\n    ✔ Created webpack config files\n    \n    ── Adding files to .gitignore and .Rbuildignore ──\n    \n    ✔ Setting active project to '/Users/mjfrigaard/projects/myLeprechaunApp'\n    ✔ Adding '^srcjs$' to '.Rbuildignore'\n    ✔ Adding '^node_modules$' to '.Rbuildignore'\n    ✔ Adding '^package\\\\.json$' to '.Rbuildignore'\n    ✔ Adding '^package-lock\\\\.json$' to '.Rbuildignore'\n    ✔ Adding '^webpack\\\\.dev\\\\.js$' to '.Rbuildignore'\n    ✔ Adding '^webpack\\\\.prod\\\\.js$' to '.Rbuildignore'\n    ✔ Adding '^webpack\\\\.common\\\\.js$' to '.Rbuildignore'\n    ✔ Adding 'node_modules' to '.gitignore'\n    \n    ── Scaffold built ──\n    \n    ℹ Run `bundle` to build the JavaScript files\n    ℹ Run `leprechaun::use_packer()`\n    ```\n    :::\n\n    :::\n\n-   Run `leprechaun::use_packer()`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    leprechaun::use_packer()\n    ```\n    :::\n\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Creating inst/dev/packer.R\n    ✔ Adding 'packer' to Suggests in DESCRIPTION\n    ! This requires `leprechaun::build()` or the `leprechaun::build_roclet`\n    ```\n    :::\n\n    :::\n    \n-   Run `leprechaun::build()`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    leprechaun::build()\n    ```\n    :::\n\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Running packer.R\n    ✔ Bundled   \n    ```\n    :::\n\n    :::\n    \n\nNow I can see what new files have been added to the package/app. \n\n-   In the `inst/dev/` folder:\n\n    -   I can see the `packer.R` file has been added  \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    inst/dev/\n          └── packer.R\n    \n    1 directory, 1 file\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the output from `packer.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"show\"}\n    #' Bundle for Prod\n    #' \n    #' Bundles packer using packer.\n    packer_bundle <- function(){\n    \thas_packer <- requireNamespace(\"packer\", quietly = TRUE)\n    \n    \tif(!has_packer){\n    \t\twarning(\n    \t\t\t\"Requires `packer` package: `install.packages('packer')`\\n\", \n    \t\t\t\"Skipping.\",\n    \t\t\tcall. = FALSE\n    \t\t)\n    \t\treturn()\n    \t}\n    \n    \tpacker::bundle()\n    }\n    \n    packer_bundle()\n    ```\n    :::\n\n    :::\n\n-   In the `srcjs/` folder:\n\n    -   I can see how `modules/message.js` and `index.js` create the alert with `Shiny.addCustomMessageHandler` \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    srcjs/\n        ├── config\n        │   ├── entry_points.json\n        │   ├── externals.json\n        │   ├── loaders.json\n        │   ├── misc.json\n        │   └── output_path.json\n        ├── index.js\n        └── modules\n            └── message.js\n    ```\n    :::\n\n    :::\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *The JavaScript in `modules/message.js` and `index.js`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    ``` js\n    // srcjs/modules/message.js\n    export const message = (msg) => {\n      alert(msg);\n    }\n    // srcjs/index.js\n    import { message } from './modules/message.js';\n    import 'shiny';\n    \n    // In shiny server use:\n    // session$sendCustomMessage('show-packer', 'hello packer!')\n    Shiny.addCustomMessageHandler('show-packer', (msg) => {\n      message(msg.text);\n    })\n    ```\n    :::\n    \nTo use the JS message scripts in `srcjs/`, I add the following to `R/server.R`: \n\n-   In `R/server.R`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    \tsend_message <- make_send_message(session)\n    \tsend_message(\"show-packer\",\n    \t\t\t\t  text = \"this is a message from your server()\")\n    ```\n    :::\n\n    :::\n\nAfter running `devtools::load_all()` and `devtools::document()`, the application loads with an alert: \n\n::: {#fig-send-message-server .column}\n![](send-message-server.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`send_message()`\n:::\n\nI can also include messages from modules. \n\n-   In `R/module_plot_display.R`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    \t\tsend_message <- make_send_message(session)\n    \t\tsend_message(\"show-packer\",\n    \t\t  text = \"this is a message from your plot_display module\")\n    ```\n    :::\n\n    :::\n\n::: {#fig-send-message-module .column}\n![](send-message-module.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`send_message()` (module)\n:::\n\nRead more about sending JavaScript messages [here on the shiny website.](https://shiny.rstudio.com/articles/js-send-message.html)\n\n\n\n##### `img/`\n\n\n\nI'll demonstrate how to use the `inst/` folder by adding an image to the application.\n\n-   Assume I want to add `leprechaun.jpg` to my UI. I start by adding the file to `inst/img/`:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    inst/\n      └── img/\n           └── leprechaun.jpg <- new image file!\n    ```\n    :::\n\n    :::\n\n-   Then I add the `img/` path to the code to UI: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    ui <- function(req) {\n      fluidPage(\n        theme = bs_theme(version = 5),\n        assets(),\n        h1(\"myLeprechaunApp\"),\n        shiny::sidebarLayout(\n          shiny::sidebarPanel(\n            var_inputUI(\"vars\")\n          ),\n          shiny::mainPanel(\n            # new image\n            shiny::tags$img(src = \"img/leprechaun.jpg\"),\n            plot_displayUI(\"plot\")\n          )\n        )\n      )\n    }\n    ```\n    :::\n\n    :::\n    \nOnce again, run `devtools::load_all()` and `devtools::document()`, restarting and loading the package, then run the application with `run()`\n\n\n::: {#fig-img-leprechaun .column}\n![](img-leprechaun.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nAdding images to `inst/img/`\n:::\n\n\n\n##### `Sass`\n\n`leprechaun` also has helper functions for adding additional resources (or *assets*) to an application. I'll work through the [SASS example from the website](https://leprechaun.opifex.org/#/examples/basic#sass) below. \n\nTo add a Sass file, I can use [`leprechaun`'s `use_sass()` function](https://leprechaun.opifex.org/#/reference/use_sass). \n  \n-   Run `leprechaun::use_sass()` (no arguments):\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    leprechaun::use_sass()\n    ```\n    :::\n\n    :::\n    \n    -   This will add files to `assets/` and `dev/` and I see the following messages:  \n  \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Creating scss\n    ✔ Creating inst/dev/sass.R\n    ✔ Adding 'sass' to Suggests in DESCRIPTION\n    ✔ Adding '^scss$' to '.Rbuildignore'\n    ! This requires `leprechaun::build()` or the `leprechaun::build_roclet`\n    ```\n    :::\n\n    :::\n    \n    -   Below are the new files in `inst/dev/` and `sass/`:\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    inst/\n        ├── scss/\n        │   ├── _core.scss\n        │   └── main.scss\n        └── dev/\n            └── sass.R\n    ```\n    :::\n\n    :::\n    \nThe `scss/` folder is created by  [`leprechaun::use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass), and it includes `_core.scss` and `main.scss`.\n\n-   `_core.scss`: the original file is below\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.scss .cell-code}\n    html{\n    \t.error {\n    \t\tcolor: red\n    \t}\n    }\n    ```\n    :::\n\n    :::\n\n-   I will change the `color:` from `red` to green (`#38B44A`) using `$accent: #38B44A;`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.scss .cell-code}\n    $accent: #38B44A;\n    \n    html{\n        h1 {\n            color: $accent;\n        }\n    }\n    ```\n    :::\n\n    :::\n\n-   Then save this file and run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    leprechaun::build()\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Running packer.R\n    ✔ Bundled       \n    ✔ Running sass.R\n    ```\n    :::\n\n    :::\n\n\n\n##### `dev/`\n\n\n\n-   The `inst/dev/sass.R` file contains a `sass_build()` function\n  \n    -   `sass_build()` looks in the `scss/` folder for `main.scss` and creates the `inst/assets/style.min.css` file.\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `inst/dev/sass.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' Build CSS\n    #'\n    #' Build the sass\n    sass_build <- function() {\n      has_sass <- requireNamespace(\"sass\", quietly = TRUE)\n    \n      if (!has_sass) {\n        warning(\n          \"Requires `sass` package: `install.packages('sass')`\\n\",\n          \"Skipping.\",\n          call. = FALSE\n        )\n        return()\n      }\n    \n      output <- sass::sass(\n        sass::sass_file(\n          \"scss/main.scss\"\n        ),\n        cache = NULL,\n        options = sass::sass_options(\n          output_style = \"compressed\"\n        ),\n        output = \"inst/assets/style.min.css\"\n      )\n      invisible(output)\n    }\n    \n    sass_build()\n    ```\n    :::\n\n    :::\n\n\n\nOnce again, I run `devtools::load_all()`, `devtools::document()`, install and restart, then load the package and `run()`\n\n::: {#fig-leprechaun-run .column}\n![](sass-leprechaun.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nrun `myLeprechaunApp` with new Sass\n:::\n\n::: {style=\"font-size: 0.80em;\"}\n\n:::\n\n\n\n##### `assets/`\n\n\n\n**How does `leprechaun::build()` work?**\n\nThe `assets/` folder contains the files generated by the `.R` scripts in the `dev/` folder.\n\n-   The contents of the `inst/dev/` folder:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    inst/dev/\n          ├── packer.R\n          └── sass.R\n    \n    1 directory, 2 files\n    ```\n    :::\n\n    :::\n\n\n-   The contents of the `inst/assets/` folder:\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    inst/assets/\n            ├── index.js\n            └── style.min.css\n    \n    1 directory, 2 files\n    ```\n    :::\n\n    :::\n\n-   `inst/dev/sass.R` creates `inst/assets/style.min.css` and `inst/dev/packer.R` creates `inst/assets/index.js`\n\n> *\"Do not call this function from within the app. It helps build things, not run them.\"* - [`build.md` guide](https://github.com/devOpifex/leprechaun/blob/1c8ef853d2fadc476926dd31424965fc19582d2f/docs/guide/build.md)\n\n##### check `serveAssets()`\n\nAfter running `leprechaun::use_sass()` and `leprechaun::build()` (which adds the `scss/` folder and the `.R` script in `inst/dev/`), I can re-check the `serveAssets()` function:\n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nserveAssets()\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n[[1]]\nList of 10\n $ name      : chr \"myLeprechaunApp\"\n $ version   : chr \"0.0.0.9000\"\n $ src       :List of 1\n  ..$ file: chr \".\"\n $ meta      : NULL\n $ script    : Named chr \"assets/index.js\"\n  ..- attr(*, \"names\")= chr \"file\"\n $ stylesheet: Named chr [1:2] \"assets/style.min.css\" \"html/R.css\"\n  ..- attr(*, \"names\")= chr [1:2] \"file\" \"file\"\n $ head      : NULL\n $ attachment: NULL\n $ package   : chr \"myLeprechaunApp\"\n $ all_files : logi TRUE\n - attr(*, \"class\")= chr \"html_dependency\"\n```\n:::\n\n:::\n\nThis shows me `stylesheet` has been updated with `\"assets/style.min.css\"` and `script` has been updated with `\"assets/index.js\"` (these files are loaded into the application when it runs). \n\n## Use\n\n**Running `leprechaun` apps:**\n\nWhen I initially create a new `leprechaun` package with `leprechaun::scaffold()`, I can run the application after a few quick steps: \n\n1. `devtools::load_all()`\n\n2. `devtools::document()`\n\n3. Install and restart (optional)\n\n4. `run()` \n\n::: {style=\"font-size: 0.80em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::load_all()\ndevtools::document()\n# install and restart\nlibrary(myLeprechaunApp)\nrun()\n```\n:::\n\n:::\n\n\n\n::: {#fig-initial-leprechaun .column}\n![](initial-myLeprechaunApp.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nrun `myLeprechaunApp`\n:::\n\n\n\n:::: {.callout-note collapse='false'}\n\n## App package scripts\n\n::: {style='font-size: 0.95em; color: #007bff;'}\n\nThe output above shows that--unlike `golem` apps--`leprechaun` includes the functions in the `R/` folder as part of the `myLeprechaunApp` package.\n\n::: \n\n::::\n\n\n\n\n**App files:**\n\n-   `R/`: After the initial setup, the [`R/` folder](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myLeprechaunApp/R) of a leprechaun app contains standard `ui.R`, `server.R` files, as well as the `run.R` function for running the app.\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    myLeprechaunApp/\n          └── R/\n              ├── _disable_autoload.R\n              ├── assets.R\n              ├── input-handlers.R\n              ├── leprechaun-utils.R\n              ├── run.R\n              ├── server.R\n              ├── ui.R\n              └── zzz.R\n          \n          1 directory, 8 files\n    ```\n    :::\n\n    :::\n\n    -   The additional files are specific to the `leprechaun` framework and workflow.\n\n**Configure:**\n\n`leprechaun` app configuration files use the [config](https://rstudio.github.io/config/articles/introduction.html) package (similar to `golem`). Unlike the `golem` package, it's not assumed I'll be using a `config.yml` file, but I can easily add one with [`leprechaun::use_config()`](https://leprechaun.opifex.org/#/guide/use#config).\n\n-   `use_config()` adds a `inst/config.yml` and `R/config.R`\n\n-   The default value in the `config.yml` files is `production: true`, which can be read using `config_read()` in `R/config.R`.\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    config_read()\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    $production\n    [1] TRUE\n    ```\n    :::\n\n    :::\n\n    -   Values can be added to `inst/config.yml` using the [config file format](https://biostat.app.vumc.org/wiki/Main/YamlR), then the `CONFIG_FILE` can be set as [an environment variable](https://rstudio.github.io/config/articles/introduction.html#configurations)\n\n**Workflow:**\n\n-   The [`inst/` folder](https://github.com/mjfrigaard/shiny-app-setups/tree/main/myLeprechaunApp/inst) contains various sub-folders for including external app resources (images, SASS, CSS, JavaScript, etc.).\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    myLeprechaunApp/\n        └── inst/\n              ├── assets/\n              ├── dev/\n              ├── img/\n              └── run/\n                  └── app.R\n          \n          5 directories, 1 file\n    ```\n    :::\n\n    :::\n\n-   `leprechaun` apps are packages, so the `inst/` folders are available to the application at runtime (which I can find using `system.file()`).\n    \n    -   Below I've passed the output from `system.file(\".\", package = \"myLeprechaunApp\")` to `fs::dir_tree()` to view it's contents:  \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"true\"}\n    ├── DESCRIPTION\n    ├── INDEX\n    ├── Meta/\n    │   ├── Rd.rds\n    │   ├── data.rds\n    │   ├── features.rds\n    │   ├── hsearch.rds\n    │   ├── links.rds\n    │   ├── nsInfo.rds\n    │   └── package.rds\n    ├── NAMESPACE\n    ├── R/\n    │   ├── myLeprechaunApp\n    │   ├── myLeprechaunApp.rdb\n    │   └── myLeprechaunApp.rdx\n    ├── assets/\n    │   ├── index.js\n    │   └── style.min.css\n    ├── data/\n    │   ├── Rdata.rdb\n    │   ├── Rdata.rds\n    │   └── Rdata.rdx\n    ├── dev/\n    │   ├── packer.R\n    │   └── sass.R\n    ├── extdata/\n    │   └── movies.RData\n    ├── help/\n    │   ├── AnIndex\n    │   ├── aliases.rds\n    │   ├── myLeprechaunApp.rdb\n    │   ├── myLeprechaunApp.rdx\n    │   └── paths.rds\n    ├── html/\n    │   ├── 00Index.html\n    │   └── R.css\n    ├── img/\n    │   └── leprechaun.jpg\n    └── run/\n        └── app.R\n    ```\n    :::\n\n    :::\n\n    -   I can see the `inst/` folders and files I've created are available to `myLeprechaunApp` at runtime: \n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"true\"}\n    ├── DESCRIPTION\n    ├── NAMESPACE\n    ├── assets/\n    │   ├── index.js\n    │   └── style.min.css\n    ├── dev/\n    │   ├── packer.R\n    │   └── sass.R\n    ├── extdata/ \n    │   └── movies.RData\n    └── img/\n          └── leprechaun.jpg\n    ```\n    :::\n\n    :::\n\n## Recap\n\n`leprechaun` delivers on its promise to be a 'leaner and smaller' version of `golem.` Most of the features in `golem` are also accessible in `leprechaun`. Including multiple `inst/` sub-folders makes adding assets to the application easier, and `leprechaun` has a long list of `use_*` functions for including Sass, CSS, HTML, and JavaScript. The package website has examples for getting started and adding multiple resources, but unfortunately the function **Reference** had limited documentation. \n\n`leprechaun` doesn't come with any testing functions, although this can be done using [`testthat`](https://testthat.r-lib.org/) and [`shinytest2`](https://rstudio.github.io/shinytest2/) (just as we would with a standard R package).\n\nFor the next (and last) post in this series, I will build a shiny application using the [`rhino` package](https://appsilon.github.io/rhino/). \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}